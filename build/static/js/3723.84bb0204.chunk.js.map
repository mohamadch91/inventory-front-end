{
  "version": 3,
  "file": "static/js/3723.84bb0204.chunk.js",
  "mappings": "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",
  "sources": [
    "app/reports/FacilityMapBasedReport.js",
    "app/services/report.service.js",
    "app/shared/sharedMap.js"
  ],
  "sourcesContent": [
    "import React, { useState } from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { useQuery } from \"react-query\";\nimport { Form } from \"react-bootstrap\";\nimport ReportService from \"../services/report.service\";\nimport \"./form.scss\";\nimport Spinner from \"../shared/Spinner\";\nimport SharedMap from \"../shared/sharedMap\";\n\nconst defaultValues = {\n  level: \"\",\n  type: \"\",\n  power: \"\",\n  func: \"\",\n};\n\nfunction FacilityMapBasedReport() {\n  const [filterValues, setFilterValues] = useState(defaultValues);\n\n  const country = JSON.parse(localStorage.getItem(\"country\")) || {};\n\n  const { data: facMapHelper, isLoading: isFacMapHelperLoading } = useQuery(\n    [\"fac-map-based-helper\"],\n    async () => {\n      const res = await ReportService.getFacMap({ help: true });\n      return res.data;\n    }\n  );\n\n  const {\n    data: reports,\n    isLoading: isReportsLoading,\n    refetch: fetchReports,\n  } = useQuery(\n    [\"fac-map-report\"],\n    async () => {\n      const params = {\n        help: false,\n      };\n      for (const key in filterValues) {\n        const filter = filterValues[key];\n        if (filter.length > 0) {\n          params[key] = filter;\n        }\n      }\n      const res = await ReportService.getFacMap(params);\n      return res.data;\n    },\n    {\n      refetchOnMount: false,\n      enabled: false,\n    }\n  );\n\n  if (isFacMapHelperLoading || isReportsLoading) {\n    return <Spinner />;\n  }\n  return (\n    <div>\n      <h3 className=\"page-title mb-3\">\n        <Trans>Facility Map-Based Report</Trans>\n      </h3>\n      <div className=\"mt-3\">\n        <div className=\"card\">\n          <div className=\"card-body py-3\">\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                fetchReports();\n              }}\n            >\n              <h4>\n                <Trans>Filter</Trans>\n              </h4>\n              <div className=\"row mt-5\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Level:</Trans>\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          level: value,\n                        }));\n                      }}\n                      value={filterValues.level}\n                      as=\"select\"\n                    >\n                      <option value=\"-1\" selected disabled>\n                        Please select\n                      </option>\n                      {facMapHelper?.level.map((lev) => (\n                        <option key={lev.id} value={lev.id}>\n                          {`${lev.id} - ${lev.name}`}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Type:</Trans>\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          type: value,\n                        }));\n                      }}\n                      value={filterValues.type}\n                      as=\"select\"\n                    >\n                      <option value=\"-1\" selected disabled>\n                        Please select\n                      </option>\n                      {facMapHelper?.type.map((ty) => (\n                        <option key={ty.id} value={ty.id}>\n                          {ty.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Power source:</Trans>\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          power: value,\n                        }));\n                      }}\n                      value={filterValues.power}\n                      as=\"select\"\n                    >\n                      <option value=\"-1\" selected disabled>\n                        Please select\n                      </option>\n                      {facMapHelper?.power.map((pow) => (\n                        <option key={pow.id} value={pow.id}>\n                          {pow.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Functioning Status:</Trans>\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          func: value,\n                        }));\n                      }}\n                      value={filterValues.func}\n                      as=\"select\"\n                    >\n                      <option value=\"-1\" selected disabled>\n                        Please select\n                      </option>\n                      <option value={true}>Working</option>\n                      <option value={false}>Not working</option>\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-4\">\n                <div className=\"col-sm-1\">\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Reports\n                  </button>\n                </div>\n                <div className=\"col-sm-1\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    onClick={() => setFilterValues(defaultValues)}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <div className=\"p-3\">\n        <h4>\n          <Trans>Report Number: Facility Map-Based ({country?.country})</Trans>\n        </h4>\n        <h6>Date: {new Date().toISOString().split(\"T\")[0]}</h6>\n        <SharedMap locations={reports} />\n      </div>\n    </div>\n  );\n}\n\nexport default FacilityMapBasedReport;\n",
    "import authHeader from \"./auth-header\";\nimport ApiManager from \"./axios-config\";\n\nconst API_URL = \"http://127.0.0.1:8000/reports/\";\n\nclass ReportService {\n  getDownloadLinks() {\n    return ApiManager.get(API_URL + \"excel\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getFacSeg(params) {\n    return ApiManager.get(API_URL + \"facseg\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getSubFacPop(params) {\n    return ApiManager.get(API_URL + \"subfacpop\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getFacMap(params) {\n    return ApiManager.get(API_URL + \"facmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapMap(params) {\n    return ApiManager.get(API_URL + \"gapmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemGp(params) {\n    return ApiManager.get(API_URL + \"item-gp\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemFac(params) {\n    return ApiManager.get(API_URL + \"itemfac\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapItem(params) {\n    return ApiManager.get(API_URL + \"gapitem\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getProfOfFac() {\n    return ApiManager.get(API_URL + \"facprof\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getColdProf(degree) {\n    return ApiManager.get(API_URL + \"coldprof\", {\n      headers: { Authorization: authHeader() },\n      params: {\n        degree,\n      },\n    });\n  }\n  getPlanningReport(params) {\n    return ApiManager.get(API_URL + \"planingreport\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getPlanningCCEGap(params) {\n    return ApiManager.get(API_URL + \"gapcce\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapCCEPlan(params) {\n    return ApiManager.get(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  postGapCCEPlan(payload) {\n    return ApiManager.post(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  deleteGapCCEPlan(payload) {\n    return ApiManager.delete(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      data: payload,\n    });\n  }\n  putGapCCEPlan(payload) {\n    return ApiManager.put(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n}\n\nexport default new ReportService();\n",
    "import { useEffect, useState } from \"react\";\nimport {\n  MapContainer,\n  useMap,\n  TileLayer,\n  Marker,\n  Popup,\n  useMapEvents,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\n// import tileLayer from '../util/tileLayer';\n// import \"leaflet/dist/leaflet.css\";\nimport \"leaflet/dist/leaflet.css\";\nconst center = [52.22977, 21.01178];\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n});\nfunction LocationMarker() {\n  const [position, setPosition] = useState(null);\n  const map = useMapEvents({\n    click() {\n      map.locate();\n      map.invalidateSize();\n    },\n    locationfound(e) {\n      setPosition(e.latlng);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  });\n\n  return position === null ? null : <></>;\n}\nconst GetCoordinates = (props) => {\n  const map = useMap();\n  const handleClick = (e) => {\n    props.change(e);\n  };\n\n  useEffect(() => {\n    if (!map) return;\n    const info = L.DomUtil.create(\"div\", \"legend\");\n\n    const positon = L.Control.extend({\n      options: {\n        position: \"bottomleft\",\n      },\n\n      onAdd: function () {\n        info.textContent = \"Click on map too add location\";\n        return info;\n      },\n    });\n    map.on(\"load\", (e) => {\n      console.log(\"salam\");\n    });\n    map.on(\"click\", (e) => {\n      window.navigator.geolocation.getCurrentPosition(console.log, console.log);\n      info.textContent = e.latlng;\n      handleClick(e);\n    });\n\n    map.addControl(new positon());\n  }, [map]);\n\n  return null;\n};\n\nconst MapWrapper = (props) => {\n  const { locations } = props;\n  const [map, setMap] = useState(null);\n  const [Current, sercurrent] = useState([]);\n  const [x1, setx1] = useState(\n    JSON.parse(localStorage.getItem(\"country\")) === null\n      ? 35\n      : JSON.parse(localStorage.getItem(\"country\"))[\"mainlocation\"] ===\n        undefined\n      ? 35\n      : JSON.parse(localStorage.getItem(\"country\"))\n          [\"mainlocation\"]?.split(\"(\")[1]\n          ?.split(\",\")[0]\n  );\n  const [x2, setx2] = useState(\n    JSON.parse(localStorage.getItem(\"country\")) === null\n      ? 51\n      : JSON.parse(localStorage.getItem(\"country\"))[\"mainlocation\"] ===\n        undefined\n      ? 51\n      : JSON.parse(localStorage.getItem(\"country\"))\n          [\"mainlocation\"]?.split(\",\")[1]\n          ?.split(\")\")[0]\n  );\n\n  const handl = (e) => {\n    props.handleChange(e);\n    setMap(e.latlng);\n  };\n  useEffect(() => {\n    const country =\n      JSON.parse(localStorage.getItem(\"country\")) === null\n        ? undefined\n        : JSON.parse(localStorage.getItem(\"country\"))[\"mainlocation\"];\n    console.log(country);\n    let ans = [];\n    if (country === undefined) {\n      ans = [50, 50];\n    } else {\n      console.log(country);\n      let temp = country?.split(\"(\")[1]?.split(\",\")[0];\n      let temp1 = country?.split(\"(\")[1]?.split(\",\")[1]?.split(\")\")[0];\n      if (temp === undefined || temp1 === undefined) {\n        setx1(35);\n        setx2(51);\n      } else {\n        setx1(parseFloat(temp));\n        setx2(parseFloat(temp1));\n      }\n    }\n    sercurrent(ans);\n  }, []);\n\n  return (\n    <div className=\"map\">\n      {Current !== null && x1 && x2 && (\n        <MapContainer\n          center={[x1, x2]}\n          zoom={9}\n          scrollWheelZoom={true}\n          style={{ width: \"100%\", height: \"450px\", zIndex: \"1\" }}\n\n          //   onClick={this.handlemapclick}\n        >\n          <TileLayer\n            {...{\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n              width: 500,\n            }}\n          />\n\n          <GetCoordinates change={handl} />\n          <>\n            {locations?.map((e, i) => {\n              return (\n                <Marker key={i} position={e.cordinates}>\n                  <Popup>\n                    <span>{e.cordinates}</span>\n                  </Popup>\n                </Marker>\n              );\n            })}\n          </>\n\n          <LocationMarker />\n        </MapContainer>\n      )}\n    </div>\n  );\n};\n\nexport default MapWrapper;\n"
  ],
  "names": [
    "defaultValues",
    "level",
    "type",
    "power",
    "func",
    "useState",
    "filterValues",
    "setFilterValues",
    "country",
    "JSON",
    "parse",
    "localStorage",
    "getItem",
    "useQuery",
    "ReportService",
    "help",
    "res",
    "data",
    "facMapHelper",
    "isFacMapHelperLoading",
    "isLoading",
    "key",
    "params",
    "filter",
    "length",
    "refetchOnMount",
    "enabled",
    "reports",
    "isReportsLoading",
    "fetchReports",
    "refetch",
    "className",
    "onSubmit",
    "e",
    "preventDefault",
    "onChange",
    "value",
    "target",
    "preValues",
    "as",
    "selected",
    "disabled",
    "map",
    "lev",
    "id",
    "name",
    "ty",
    "pow",
    "onClick",
    "Date",
    "toISOString",
    "split",
    "locations",
    "API_URL",
    "ApiManager",
    "headers",
    "Authorization",
    "authHeader",
    "degree",
    "payload",
    "LocationMarker",
    "position",
    "setPosition",
    "useMapEvents",
    "click",
    "locate",
    "invalidateSize",
    "locationfound",
    "latlng",
    "flyTo",
    "getZoom",
    "L",
    "iconRetinaUrl",
    "require",
    "iconUrl",
    "shadowUrl",
    "GetCoordinates",
    "props",
    "useMap",
    "useEffect",
    "info",
    "positon",
    "options",
    "onAdd",
    "textContent",
    "on",
    "console",
    "log",
    "window",
    "navigator",
    "geolocation",
    "getCurrentPosition",
    "change",
    "handleClick",
    "addControl",
    "setMap",
    "Current",
    "sercurrent",
    "undefined",
    "x1",
    "setx1",
    "x2",
    "setx2",
    "ans",
    "temp",
    "temp1",
    "parseFloat",
    "center",
    "zoom",
    "scrollWheelZoom",
    "style",
    "width",
    "height",
    "zIndex",
    "url",
    "handleChange",
    "i",
    "cordinates"
  ],
  "sourceRoot": ""
}
