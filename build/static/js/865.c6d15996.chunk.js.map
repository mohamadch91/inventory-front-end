{"version":3,"file":"static/js/865.c6d15996.chunk.js","mappings":"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","sources":["app/settings/ItemType.js","app/shared/CloseIcon.js","app/shared/EditIcon.js","app/shared/SharedTable.js"],"sourcesContent":["import { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport ItemsService from \"../services/items.service\";\nimport CloseIcon from \"../shared/CloseIcon\";\nimport EditIcon from \"../shared/EditIcon\";\nimport SharedTable from \"../shared/SharedTable\";\nimport toast from \"react-hot-toast\";\nimport Spinner from \"../shared/Spinner\";\nimport \"./itemClass.scss\";\nimport \"./itemType.scss\";\nimport \"../styles/inputs.scss\";\nimport { Trans } from \"react-i18next\";\n\nfunction ItemType() {\n  const [itemTypes, setItemTypes] = useState([]);\n  const [filteredItemTypes, setFilteredItemTypes] = useState([]);\n  const [itemClasses, setItemClasses] = useState([]);\n  const [editFormData, setEditFormData] = useState({});\n  const [addRowFormData, setAddRowFormData] = useState({});\n  const [editableRowId, setEditableRowId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedItemClass, setSelectedItemClass] = useState(0);\n\n  function getItemClasses() {\n    ItemsService.getItemClasses()\n      .then((res) => {\n        const data = res.data.filter((item) => item.active === true);\n        setItemClasses(data);\n        getItemTypes();\n      })\n      .catch((err) => {\n                toast.error(<Trans>There is a problem loading data</Trans>);\n\n        setIsLoading(false);\n      });\n  }\n\n  function getItemTypes() {\n    ItemsService.getItemTypes()\n      .then((res) => {\n        setItemTypes(res.data);\n        if (selectedItemClass && selectedItemClass !== \"0\") {\n          setFilteredItemTypes(\n            res?.data?.filter(\n              (item) => item.itemclass === parseInt(selectedItemClass)\n            )\n          );\n        } else {\n          setFilteredItemTypes(res.data);\n        }\n        setIsLoading(false);\n      })\n      .catch((err) => {\n                toast.error(<Trans>There is a problem loading data</Trans>);\n\n        setIsLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    getItemClasses();\n  }, []);\n\n  useEffect(() => {\n    console.log(selectedItemClass);\n    if (selectedItemClass && selectedItemClass !== \"0\") {\n      setFilteredItemTypes(\n        itemTypes?.filter(\n          (item) => item.itemclass === parseInt(selectedItemClass)\n        )\n      );\n    } else {\n      setFilteredItemTypes(itemTypes);\n    }\n  }, [selectedItemClass]);\n\n  useEffect(() => {\n    setAddRowFormData({\n      ...addRowFormData,\n      itemClass: itemClasses[0],\n      active: true,\n      havePQS: false,\n    });\n  }, [itemClasses]);\n\n  function handleEdit(i) {\n    const formData = itemTypes.find((item) => item.id === i.id);\n    setEditFormData(formData);\n    setEditableRowId(i.id);\n  }\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setEditFormData({ ...editFormData, [name]: value });\n  }\n\n  function handleChangeAdd(e) {\n    const { name, value } = e.target;\n    setAddRowFormData({ ...addRowFormData, [name]: value });\n  }\n\n  function handleSubmitEdit() {\n    const isValid = Object.keys(editFormData).every((key) => {\n      return editFormData[key] !== \"\";\n    });\n    if (!isValid) {\n            toast.error(<Trans>Please fill all the fields</Trans>);\n\n    } else {\n      setIsLoading(true);\n      const formToPut = (({ id, title, code, active, havePQS, itemclass }) => ({\n        id,\n        title,\n        code,\n        active,\n        havePQS,\n        itemclass,\n      }))(editFormData);\n      ItemsService.putItemTypes(formToPut)\n        .then((res) => {\n          getItemTypes();\n        })\n        .catch((err) => {\n                    toast.error(<Trans>{err.response.data}</Trans>);\n\n                    toast.error(<Trans>There is a problem sending data</Trans>);\n\n          setIsLoading(false);\n        });\n      setEditableRowId(null);\n      setEditFormData({});\n    }\n  }\n\n  function handleSubmitNew() {\n    const isValid = Object.keys(addRowFormData).every((key) => {\n      return addRowFormData[key] !== \"\";\n    });\n    if (!isValid) {\n            toast.error(<Trans>Please fill all the fields</Trans>);\n\n    } else {\n      setIsLoading(true);\n      let formToPut = (({ title, code, active, havePQS }) => ({\n        title,\n        code,\n        active,\n        havePQS,\n      }))(addRowFormData);\n      if (addRowFormData?.itemClass?.id) {\n        formToPut.itemclass = parseInt(addRowFormData.itemClass.id);\n      } else {\n        formToPut.itemclass = parseInt(addRowFormData.itemClass);\n      }\n      ItemsService.postItemType(formToPut)\n        .then((res) => {\n          getItemTypes();\n          // setSelectedItemClass(0);\n        })\n        .catch((err) => {\n                    toast.error(<Trans>{err.response.data}</Trans>);\n             \n                    toast.error(<Trans>There is a problem sending data</Trans>);\n\n          setIsLoading(false);\n        });\n      setAddRowFormData({\n        ...addRowFormData,\n        // itemClass: itemClasses[0],\n        active: true,\n        havePQS: false,\n        title: \"\",\n      });\n    }\n  }\n\n  function findItemClassById(id) {\n    return itemClasses.find((item) => item.id === id);\n  }\n\n  return (\n    <div className=\"item-class-page\">\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <>\n          <div className=\"mb-4\">\n            <div className=\"mb-2\">\n              <h4 className=\"page-title\">\n                <Trans>Item class Filter to list categories</Trans>\n              </h4>\n            </div>\n            <div className=\"\">\n              <select\n                name=\"itemclass\"\n                onChange={(e) => {\n                  setSelectedItemClass(e.target.value);\n                }}\n                value={selectedItemClass}\n              >\n                <option value={0}>All</option>\n                {itemClasses.map((itemClass, index) => (\n                  <option key={itemClass.id} value={itemClass.id}>\n                    {itemClass.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"add-row mt-4 mb-2\">\n            <h3>\n              {\" \"}\n              <Trans>Enter new item category</Trans>\n            </h3>\n\n            <div className=\"row\">\n              <div className=\"col-md-3 flex-column d-flex\">\n                <label>\n                  <Trans>Title</Trans>\n                </label>\n                <input\n                  name=\"title\"\n                  type=\"text\"\n                  tabIndex={1}\n                  onChange={handleChangeAdd}\n                  value={addRowFormData?.title}\n                  required\n                ></input>\n              </div>\n              <div className=\"col-md-3 flex-column d-flex\">\n                <label>\n                  <Trans>Item class</Trans>\n                </label>\n                <select\n                  name=\"itemClass\"\n                  tabIndex={2}\n                  onChange={handleChangeAdd}\n                  value={addRowFormData?.itemClass}\n                >\n                  {itemClasses.map((item, index) => (\n                    <option\n                      key={item.id}\n                      value={item.id}\n                      selected={index === 0}\n                    >\n                      {item.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"col-md-6 d-flex justify-content-center align-items-center mt-3\">\n                <label>\n                  <Trans>Active</Trans>\n                </label>\n                <div class=\"form-check form-check-primary mt-3\">\n                  <label className=\"form-check-label\">\n                    <input\n                      name=\"active\"\n                      tabIndex={3}\n                      className=\"mr-1\"\n                      type=\"checkbox\"\n                      onChange={() =>\n                        setAddRowFormData({\n                          ...addRowFormData,\n                          active: !addRowFormData.active,\n                        })\n                      }\n                      checked={addRowFormData?.active}\n                    ></input>\n                    <i className=\"input-helper mt-3\"></i>\n                  </label>\n                </div>\n                <label>\n                  <Trans>Is it from PQS/PIS list?</Trans>\n                </label>\n                <div class=\"form-check form-check-primary mt-3\">\n                  <label className=\"form-check-label\">\n                    <input\n                      name=\"havePQS\"\n                      className=\"mr-1\"\n                      tabIndex={4}\n                      type=\"checkbox\"\n                      onChange={() =>\n                        setAddRowFormData({\n                          ...addRowFormData,\n                          havePQS: !addRowFormData.havePQS,\n                        })\n                      }\n                      checked={addRowFormData?.havePQS}\n                    ></input>\n                    <i className=\"input-helper mt-3\"></i>\n                  </label>\n                </div>\n                <button\n                  tabIndex={5}\n                  className=\"save-btn w-50\"\n                  onClick={handleSubmitNew}\n                >\n                  <Trans>Save</Trans>\n                </button>\n              </div>\n            </div>\n          </div>\n          <h3 className=\"page-title mb-3\">\n            <Trans>Items category list</Trans>\n          </h3>\n          <div className=\"mb-2\">\n            <SharedTable>\n              <TableHead>\n                <TableRow>\n                  <TableCell></TableCell>\n                  <TableCell>\n                    <Trans>Title</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Item class</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Code</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Active</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Is it from PQS/PIS list?</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Edit</Trans>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredItemTypes?.map((itemType, index) => (\n                  <>\n                    {editableRowId !== itemType.id ? (\n                      <TableRow>\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>{itemType.title}</TableCell>\n                        <TableCell>\n                          {findItemClassById(itemType.itemclass)?.title}\n                        </TableCell>\n                        <TableCell>{itemType.code}</TableCell>\n                        <TableCell>\n                          <div class=\"form-check form-check-primary\">\n                            <label className=\"form-check-label\">\n                              <input\n                                type=\"checkbox\"\n                                className=\"from-check-input\"\n                                checked={itemType.active}\n                                id=\"cb1\"\n                                disabled\n                              ></input>\n                              <i className=\"input-helper\"></i>\n                            </label>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div class=\"form-check form-check-primary\">\n                            <label className=\"form-check-label\">\n                              <input\n                                type=\"checkbox\"\n                                className=\"custom-check\"\n                                id=\"cb1\"\n                                checked={itemType.havePQS}\n                                disabled\n                              ></input>\n                              <i className=\"input-helper\"></i>\n                            </label>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <button\n                            className=\"edit-btn\"\n                            onClick={(event) => handleEdit(itemType)}\n                          >\n                            <EditIcon />\n                          </button>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      <TableRow>\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>\n                          <input\n                            name=\"title\"\n                            type=\"text\"\n                            onChange={handleChange}\n                            value={editFormData?.title}\n                            required\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <select\n                            name=\"itemclass\"\n                            onChange={handleChange}\n                            value={editFormData?.itemClass}\n                          >\n                            {itemClasses.map((itemClass, index) => (\n                              <option\n                                key={itemClass.id}\n                                value={itemClass.id}\n                                selected={itemType.itemclass === itemClass.id}\n                              >\n                                {itemClass.title}\n                              </option>\n                            ))}\n                          </select>\n                        </TableCell>\n                        <TableCell>{editFormData?.code}</TableCell>\n                        <TableCell>\n                          <div class=\"form-check form-check-primary\">\n                            <label className=\"form-check-label\">\n                              <input\n                                name=\"active\"\n                                type=\"checkbox\"\n                                onChange={() =>\n                                  setEditFormData({\n                                    ...editFormData,\n                                    active: !editFormData.active,\n                                  })\n                                }\n                                checked={editFormData?.active}\n                              ></input>\n                              <i className=\"input-helper\"></i>\n                            </label>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div class=\"form-check form-check-primary\">\n                            <label className=\"form-check-label\">\n                              <input\n                                name=\"havePQS\"\n                                type=\"checkbox\"\n                                onChange={() =>\n                                  setEditFormData({\n                                    ...editFormData,\n                                    havePQS: !editFormData.havePQS,\n                                  })\n                                }\n                                checked={editFormData?.havePQS}\n                              ></input>\n                              <i className=\"input-helper\"></i>\n                            </label>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <button\n                            className=\"save-btn\"\n                            onClick={handleSubmitEdit}\n                          >\n                            <Trans>Save</Trans>\n                          </button>\n                          <button\n                            className=\"close-btn\"\n                            onClick={() => setEditableRowId(null)}\n                          >\n                            <CloseIcon />\n                          </button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </TableBody>\n            </SharedTable>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ItemType;\n","/**\n * retun an svg\n *   CloseIcon\n */\nfunction CloseIcon() {\n  return (\n    <>\n      <svg\n        version=\"1.1\"\n        id=\"Layer_1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        x=\"0px\"\n        y=\"0px\"\n        width=\"121.31px\"\n        height=\"122.876px\"\n        viewBox=\"0 0 121.31 122.876\"\n        enableBackground=\"new 0 0 121.31 122.876\"\n        xmlSpace=\"preserve\"\n      >\n        <g>\n          <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M90.914,5.296c6.927-7.034,18.188-7.065,25.154-0.068 c6.961,6.995,6.991,18.369,0.068,25.397L85.743,61.452l30.425,30.855c6.866,6.978,6.773,18.28-0.208,25.247 c-6.983,6.964-18.21,6.946-25.074-0.031L60.669,86.881L30.395,117.58c-6.927,7.034-18.188,7.065-25.154,0.068 c-6.961-6.995-6.992-18.369-0.068-25.397l30.393-30.827L5.142,30.568c-6.867-6.978-6.773-18.28,0.208-25.247 c6.983-6.963,18.21-6.946,25.074,0.031l30.217,30.643L90.914,5.296L90.914,5.296z\"\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nexport default CloseIcon;\n","/**\n * retun an svg\n *   EditIcon\n */\nfunction EditIcon() {\n  return (\n    <>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 512 512\"\n        width=\"30\"\n        height=\"30\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        enable-background=\"new 0 0 512 512\"\n      >\n        <path d=\"m455.1,137.9l-32.4,32.4-81-81.1 32.4-32.4c6.6-6.6 18.1-6.6 24.7,0l56.3,56.4c6.8,6.8 6.8,17.9 0,24.7zm-270.7,271l-81-81.1 209.4-209.7 81,81.1-209.4,209.7zm-99.7-42l60.6,60.7-84.4,23.8 23.8-84.5zm399.3-282.6l-56.3-56.4c-11-11-50.7-31.8-82.4,0l-285.3,285.5c-2.5,2.5-4.3,5.5-5.2,8.9l-43,153.1c-2,7.1 0.1,14.7 5.2,20 5.2,5.3 15.6,6.2 20,5.2l153-43.1c3.4-0.9 6.4-2.7 8.9-5.2l285.1-285.5c22.7-22.7 22.7-59.7 0-82.5z\" />\n      </svg>\n    </>\n  );\n}\n\nexport default EditIcon;\n","import { Table, TableContainer } from \"@mui/material\";\n/**\n * @param  {DOMElement} {children}\n * shared table use in settings and all tables\n */\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"],"names":["useState","itemTypes","setItemTypes","filteredItemTypes","setFilteredItemTypes","itemClasses","setItemClasses","editFormData","setEditFormData","addRowFormData","setAddRowFormData","editableRowId","setEditableRowId","isLoading","setIsLoading","selectedItemClass","setSelectedItemClass","getItemTypes","ItemsService","then","res","data","filter","item","itemclass","parseInt","catch","err","toast","handleChange","e","target","name","value","handleChangeAdd","handleSubmitEdit","Object","keys","every","key","formToPut","id","title","code","active","havePQS","response","useEffect","console","log","itemClass","className","onChange","map","index","type","tabIndex","required","selected","class","checked","onClick","itemType","find","disabled","event","i","formData","handleEdit","version","xmlns","xmlnsXlink","x","y","width","height","viewBox","enableBackground","xmlSpace","fillRule","clipRule","d","children"],"sourceRoot":""}