{"version":3,"file":"static/js/8076.90cb2109.chunk.js","mappings":"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","sources":["app/settings/ItemTypeLevel.js","app/shared/SharedTable.js"],"sourcesContent":["import { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { useState } from \"react\";\nimport SharedTable from \"../shared/SharedTable\";\nimport { Form } from \"react-bootstrap\";\nimport ItemsService from \"../services/items.service\";\nimport { useQuery } from \"react-query\";\nimport Spinner from \"../shared/Spinner\";\nimport \"../styles/table.scss\";\nimport { Trans } from \"react-i18next\";\n\nfunction ItemTypeLevel() {\n  const [selectedItemClass, setSelectedItemClass] = useState();\n  const [selectedLevel, setSelectedLevel] = useState(1);\n  const [fieldsValue, setFieldsValue] = useState([]);\n\n  const { data: itemClassesWithItemTypes, isLoading: isItemClassesLoading } =\n    useQuery(\n      [\"active-item-classes-with-item-type\"],\n      async () => {\n        const res = await ItemsService.getActiveItemClassesWithFields();\n        return res.data;\n      },\n      {\n        onSuccess(data) {\n          setSelectedItemClass(data[0]);\n        },\n      }\n    );\n\n  const { data: itemsTinLevel, isLoading: isItemTinLevelLoading } = useQuery(\n    [\"itemTinLevel\", selectedLevel],\n    async () => {\n      const res = await ItemsService.getItemTinLevels(selectedLevel);\n      const fieldsValueClone = [...fieldsValue];\n      res.data.forEach((newField) => {\n        if (\n          !fieldsValue.find(\n            (fieldValue) =>\n              fieldValue.itemtypeid === newField.itemtype.id &&\n              fieldValue.level === newField.level.id\n          )\n        ) {\n          fieldsValueClone.push({\n            itemtypeid: newField.itemtype.id,\n            level: newField.level.id,\n            active: newField.active,\n            id: newField.id,\n          });\n        }\n      });\n      setFieldsValue(fieldsValueClone);\n      return fieldsValueClone;\n    },\n    {\n      refetchOnMount: true,\n    }\n  );\n\n  //TODO: if levels doesn't exist, do what?\n  const levels = JSON.parse(localStorage.getItem(\"country\"))?.levels ?? 1;\n\n  const selectItemClassHandler = (e) => {\n    setSelectedItemClass(itemClassesWithItemTypes[e.target.value]);\n  };\n\n  const selectLevelHandler = (e) => {\n    setSelectedLevel(+e.target.value);\n  };\n\n  const onEnableFieldHandler = (e, currentField) => {\n    const checked = e.target.checked;\n    const fieldValuesClone = [...fieldsValue];\n    const fieldIndex = fieldsValue.findIndex(\n      (field) =>\n        field.itemtypeid === currentField.id && field.level === selectedLevel\n    );\n    if (fieldIndex === -1) {\n      fieldValuesClone.push({\n        itemtypeid: currentField.id,\n        level: selectedLevel,\n        active: checked,\n      });\n    } else {\n      const currentFieldValue = fieldsValue[fieldIndex];\n      fieldValuesClone[fieldIndex] = {\n        ...currentFieldValue,\n        active: !currentFieldValue.active,\n        level: selectedLevel,\n      };\n    }\n    setFieldsValue(fieldValuesClone);\n  };\n\n  const onSaveHandler = async () => {\n    const payload = fieldsValue.filter(\n      (field) =>\n        !itemsTinLevel?.some(\n          (item) =>\n            item.itemtypeid === field.itemtypeid &&\n            item.level === field.level &&\n            item.active === field.active\n        )\n    );\n    const res = await ItemsService.putItemTypeInClass(payload);\n  };\n\n  return (\n    <div>\n      <h3 className=\"page-title mb-3\">\n        <Trans>Item categories in different levels</Trans>\n      </h3>\n      {isItemClassesLoading ? (\n        <Spinner />\n      ) : (\n        <div className=\"mt-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-sm-12 col-lg-5\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-12\">\n                      <Trans>Item class</Trans>\n                    </label>\n                    <div className=\"col-sm-12\">\n                      <Form.Control\n                        onChange={selectItemClassHandler}\n                        className=\"form-select\"\n                        as=\"select\"\n                      >\n                        {itemClassesWithItemTypes.map((itemClass, index) => (\n                          <option value={index}>\n                            {itemClass.item_class.title}\n                          </option>\n                        ))}\n                      </Form.Control>\n                    </div>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-5\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-12\">\n                      <Trans>Levels</Trans>\n                    </label>\n                    <div className=\"col-sm-12\">\n                      <Form.Control\n                        onChange={selectLevelHandler}\n                        value={selectedLevel}\n                        className=\"form-select\"\n                        as=\"select\"\n                      >\n                        {Array.from({ length: levels }).map((_, index) => (\n                          <option value={index + 1}>{index + 1}</option>\n                        ))}\n                      </Form.Control>\n                    </div>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-2\">\n                  <button\n                    className=\"btn btn-primary w-100 mt-4\"\n                    onClick={onSaveHandler}\n                  >\n                    <Trans>Save</Trans>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          {selectedItemClass?.item_type.length > 0 && (\n            <div className=\"mt-5 table-container\">\n              <SharedTable>\n                <TableHead>\n                  <TableRow>\n                    <TableCell className=\"col-sm-10\">\n                      <Trans>Items category</Trans>\n                    </TableCell>\n                    <TableCell>\n                      <Trans>Enable</Trans>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {selectedItemClass.item_type.map((item) => {\n                    const isChecked = fieldsValue.find(\n                      (field) =>\n                        field.itemtypeid === item.id &&\n                        field.level === selectedLevel\n                    )?.active;\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"col-sm-10\">\n                          {item.title}\n                        </TableCell>\n                        <TableCell>\n                          <div class=\"form-check form-check-primary mt-3\">\n                            <label className=\"form-check-label\">\n                              <input\n                                type=\"checkbox\"\n                                disabled={isItemTinLevelLoading}\n                                checked={!!isChecked}\n                                onChange={(e) => onEnableFieldHandler(e, item)}\n                              />\n                              <i className=\"input-helper mt-3\"></i>\n                            </label>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </SharedTable>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ItemTypeLevel;\n","import { Table, TableContainer } from \"@mui/material\";\n/**\n * @param  {DOMElement} {children}\n * shared table use in settings and all tables\n */\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"],"names":["useState","selectedItemClass","setSelectedItemClass","selectedLevel","setSelectedLevel","fieldsValue","setFieldsValue","useQuery","ItemsService","res","data","onSuccess","itemClassesWithItemTypes","isItemClassesLoading","isLoading","fieldsValueClone","forEach","newField","find","fieldValue","itemtypeid","itemtype","id","level","push","active","refetchOnMount","itemsTinLevel","isItemTinLevelLoading","levels","JSON","parse","localStorage","getItem","onSaveHandler","payload","filter","field","some","item","className","onChange","e","target","value","as","map","itemClass","index","item_class","title","Array","from","length","_","onClick","item_type","isChecked","class","type","disabled","checked","currentField","fieldValuesClone","fieldIndex","findIndex","currentFieldValue","onEnableFieldHandler","children"],"sourceRoot":""}