{"version":3,"file":"static/js/4941.bb828473.chunk.js","mappings":"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","sources":["app/helpers/separator.js","app/charts/SubFacilityReportChart.js","app/reports/SubFacilityPopulationDataReport.js","app/services/report.service.js","app/shared/SharedTable.js"],"sourcesContent":["\nexport const separator = (x) => {\n  if (x === undefined || x === null || x===\"\") {\n    return;\n  }\n  x = parseInt(x);\n  return thousandSeparator(x);\n};\n/**\n * @param  {Integer} n\n * @param  {BOOL} sep\n * check need seperator or not\n */\nfunction thousandSeparator(n, sep) {\n  function reverse(text) {\n\n    return text.split(\"\").reverse().join(\"\");\n  }\n\n  var rx = /(\\d{3}(?!.*\\.|$))/g;\n\n  if (!sep) {\n    sep = \" \";\n  }\n\n  return reverse(reverse(n.toString()).replace(rx, \"$1\" + sep));\n}\n","import React, { Component } from \"react\";\nimport { HorizontalBar } from \"react-chartjs-2\";\nimport { Trans } from \"react-i18next\";\n/**\n * component for the SubFacilityReportChart\n * @returns {JSX.Element} The SubFacilityReportChart\n * @param {props} rows get the rows from the props\n * select some random colors for the chart\n * set the data for the chart\n * set the options for the chart\n * \n */\n\n/**\n * @constant {array} backgroundColor\n * @constant {array} borderColor\n * containt some random colors for the chart\n * contain some random colors for the chart border\n */\nconst backgroundColors = [\n  \"rgba(255, 99, 132, 0.2)\",\n  \"rgba(54, 162, 235, 0.2)\",\n  \"rgba(255, 206, 86, 0.2)\",\n  \"rgba(75, 192, 192, 0.2)\",\n  \"rgba(153, 102, 255, 0.2)\",\n  \"rgba(255, 159, 64, 0.2)\",\n];\nconst borderColors = [\n  \"rgba(255,99,132,1)\",\n  \"rgba(54, 162, 235, 1)\",\n  \"rgba(255, 206, 86, 1)\",\n  \"rgba(75, 192, 192, 1)\",\n  \"rgba(153, 102, 255, 1)\",\n  \"rgba(255, 159, 64, 1)\",\n];\n/**\n * component for the SubFacilityReportChart\n * @returns {JSX.Element} The SubFacilityReportChart\n * @param {props} rows get the rows from the props\n * select some random colors for the chart\n * set the data for the chart\n * set the options for the chart\n * \n */\n\nexport class SubFacilityReportChart extends Component {\n  /**\n   * @param  {array} rows\n   * get array of rows and return the result table with colors and data for the chart\n   */\n  generateData = (rows) => {\n    const result = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Population\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1,\n          fill: false,\n        },\n      ],\n    };\n    for (const row of rows) {\n      // get the random color from the backgroundColors array\n\n      const randomIndex = Math.floor(Math.random() * 6);\n      \n      result.labels.push(row.name);\n      result.datasets[0].data.push(\n        // if the isGeneral is true then get the general population\n        this.props.isGeneral ? row.generalpopulation : row.underage\n      );\n      // set random colors for background and border\n      result.datasets[0].backgroundColor.push(backgroundColors[randomIndex]);\n      result.datasets[0].borderColor.push(borderColors[randomIndex]);\n    }\n    return result;\n  };\n\n  options = {\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            userCallback: function (label, index, labels) {\n              // when the floored value is the same as the value we have a whole number\n              if (Math.floor(label) === label) {\n                return label;\n              }\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-md-12 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">\n                  <Trans>Sub-facility populations data</Trans>\n                </h4>\n                <h6 className=\"mt-1\">\n          {/* check for general population selected or under one selected */}\n                  {this.props.isGeneral\n                    ? (<Trans>General populations</Trans>)\n                    : (<Trans>Under-1 populations</Trans>)}\n                </h6>\n                {this.props.rows && (\n                  <HorizontalBar\n                    data={this.generateData(this.props.rows)}\n                    options={this.options}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SubFacilityReportChart;\n","import React, { useEffect, useState } from \"react\";\nimport { Translation,Trans } from \"react-i18next\";\nimport { useQuery } from \"react-query\";\nimport { Form } from \"react-bootstrap\";\nimport ReportService from \"../services/report.service\";\nimport \"./form.scss\";\nimport Spinner from \"../shared/Spinner\";\nimport SharedTable from \"../shared/SharedTable\";\nimport { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport \"../styles/table.scss\";\nimport { separator } from \"../helpers/separator\";\nimport { SubFacilityReportChart } from \"../charts/SubFacilityReportChart\";\n\nfunction SubFacilityPopulationDataReport() {\n  const [selectedLevel, setSelectedLevel] = useState(-1);\n\n  const { data: subFacHelper, isLoading: isSubFacHelperLoading } = useQuery(\n    [\"sub-fac-pop-data-helper\"],\n    async () => {\n      const res = await ReportService.getSubFacPop({ help: true });\n      return res.data;\n    }\n  );\n\n  const {\n    data: reports,\n    isLoading: isReportsLoading,\n    refetch: fetchReports,\n  } = useQuery([\"sub-fac-pop-report\"], async () => {\n    const params = {\n      help: false,\n    };\n    if (selectedLevel !== -1) {\n      params[\"level\"] = selectedLevel;\n    }\n    const res = await ReportService.getSubFacPop(params);\n    return res.data;\n  });\n\n  useEffect(() => {\n    if (selectedLevel) {\n      fetchReports();\n    }\n  }, [selectedLevel]);\n\n  const country = JSON.parse(localStorage.getItem(\"country\"));\n\n  if (isSubFacHelperLoading || isReportsLoading) {\n    return <Spinner />;\n  }\n\n  return (\n    <div>\n      <h3 className=\"page-title mb-3\">\n        <Trans>Sub-facility populations data</Trans>\n      </h3>\n      <SubFacilityReportChart\n        isGeneral={country?.poptarget === \"General population\"}\n        rows={reports}\n      />\n      <div className=\"mt-3\">\n        <div className=\"card\">\n          <div className=\"card-body py-3\">\n            <Form.Group className=\"row\">\n              <label className=\"col-sm-4 mt-4\">\n                <Trans>Levels</Trans>:\n              </label>\n              <Form.Control\n                className=\"form-select col-sm-4 mt-1\"\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setSelectedLevel(value);\n                }}\n                as=\"select\"\n              >\n                <Translation>\n                  {(t, { i18n }) => (\n                    <option i18n value=\"-1\" selected>\n                      {t(\"Please select\")}\n                    </option>\n                  )}\n                </Translation>\n                {subFacHelper?.map((lev) => (\n                  <option key={lev.id} value={lev.id}>\n                    {`${lev.id} - ${lev.name}`}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-3\">\n        <div className=\"card\">\n          <div className=\"card-body py-3\">\n            <h4>\n              <Trans>Reports</Trans>\n            </h4>\n            <div className=\"mt-3 table-container\">\n              <SharedTable>\n                <TableHead>\n                  <TableRow>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Facility Name</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Facility parent</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Level</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Code</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-1\">\n                      <Trans>Type</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-1\">\n                      <Trans>Under 1</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>General populations</Trans>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {reports?.map((report, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell className=\"col-sm-2\">\n                          {report.name ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {report.parent ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {report.level ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {report.code ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-1\">\n                          {report.type ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-1\">\n                          {separator(report.underage) ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {separator(report.generalpopulation) ?? \"-\"}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </SharedTable>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SubFacilityPopulationDataReport;\n","import authHeader from \"./auth-header\";\nimport ApiManager from \"./axios-config\";\n\nconst API_URL = \"https://mobile.invgap.org/reports/\";\n\nclass ReportService {\n  getDownloadLinks() {\n    return ApiManager.get(API_URL + \"excel\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getFacSeg(params) {\n    return ApiManager.get(API_URL + \"facseg\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getSubFacPop(params) {\n    return ApiManager.get(API_URL + \"subfacpop\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getFacMap(params) {\n    return ApiManager.get(API_URL + \"facmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapMap(params) {\n    return ApiManager.get(API_URL + \"gapmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemGp(params) {\n    return ApiManager.get(API_URL + \"item-gp\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemFac(params) {\n    return ApiManager.get(API_URL + \"itemfac\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapItem(params) {\n    return ApiManager.get(API_URL + \"gapitem\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getProfOfFac() {\n    return ApiManager.get(API_URL + \"facprof\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getColdProf(degree) {\n    return ApiManager.get(API_URL + \"coldprof\", {\n      headers: { Authorization: authHeader() },\n      params: {\n        degree,\n      },\n    });\n  }\n  getPlanningReport(params) {\n    return ApiManager.get(API_URL + \"planingreport\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getPlanningCCEGap(params) {\n    return ApiManager.get(API_URL + \"gapcce\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapCCEPlan(params) {\n    return ApiManager.get(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  postGapCCEPlan(payload) {\n    return ApiManager.post(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  deleteGapCCEPlan(payload) {\n    return ApiManager.delete(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      data: payload,\n    });\n  }\n  putGapCCEPlan(payload) {\n    return ApiManager.put(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  savegaps(payload, saved) {\n    return ApiManager.post(API_URL + \"gapsave?condition=\" + payload, saved, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n}\n\nexport default new ReportService();\n","import { Table, TableContainer } from \"@mui/material\";\n/**\n * @param  {DOMElement} {children}\n * shared table use in settings and all tables\n */\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"],"names":["separator","x","undefined","n","sep","reverse","text","split","join","rx","toString","replace","thousandSeparator","parseInt","backgroundColors","borderColors","SubFacilityReportChart","generateData","rows","result","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","fill","row","randomIndex","Math","floor","random","push","name","props","isGeneral","generalpopulation","underage","options","scales","xAxes","ticks","beginAtZero","userCallback","index","legend","display","elements","point","radius","className","Trans","this","Component","useState","selectedLevel","setSelectedLevel","useQuery","ReportService","help","res","subFacHelper","isSubFacHelperLoading","isLoading","params","reports","isReportsLoading","fetchReports","refetch","useEffect","country","JSON","parse","localStorage","getItem","Spinner","poptarget","Form","onChange","e","value","target","as","Translation","t","i18n","selected","map","lev","id","SharedTable","TableHead","TableRow","TableCell","TableBody","report","parent","level","code","type","API_URL","ApiManager","headers","Authorization","authHeader","degree","payload","saved","children"],"sourceRoot":""}