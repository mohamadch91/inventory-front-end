{
  "version": 3,
  "file": "static/js/5668.76ba1d2c.chunk.js",
  "mappings": "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",
  "sources": [
    "app/reports/ProfileOfFacility.js",
    "app/services/report.service.js",
    "app/shared/SharedTable.js"
  ],
  "sourcesContent": [
    "import React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { useQuery } from \"react-query\";\nimport ReportService from \"../services/report.service\";\nimport Spinner from \"../shared/Spinner\";\nimport SharedTable from \"../shared/SharedTable\";\nimport { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport \"../styles/table.scss\";\n\nconst allTableData = {\n  by_type: [\n    {\n      headTitle: \"Level\",\n      valueKey: \"level\",\n    },\n    {\n      headTitle: \"Level Name\",\n      valueKey: \"name\",\n    },\n    {\n      headTitle: \"Facility type\",\n      valueKey: \"type\",\n    },\n    {\n      headTitle: \"Total number of facilities\",\n      valueKey: \"count\",\n    },\n  ],\n  by_owner: [\n    {\n      headTitle: \"Level\",\n      valueKey: \"level\",\n    },\n    {\n      headTitle: \"Level Name\",\n      valueKey: \"name\",\n    },\n    {\n      headTitle: \"Ownership\",\n      valueKey: \"owner\",\n    },\n    {\n      headTitle: \"Total number of facilities\",\n      valueKey: \"count\",\n    },\n  ],\n  by_power: [\n    {\n      headTitle: \"Level\",\n      valueKey: \"level\",\n    },\n    {\n      headTitle: \"Level Name\",\n      valueKey: \"name\",\n    },\n    {\n      headTitle: \"Power source\",\n      valueKey: \"power\",\n    },\n    {\n      headTitle: \"Total number of facilities\",\n      valueKey: \"count\",\n    },\n  ],\n  general: [\n    {\n      headTitle: \"Level\",\n      valueKey: \"level\",\n    },\n    {\n      headTitle: \"Level Name\",\n      valueKey: \"name\",\n    },\n    {\n      headTitle: \"Total\",\n      valueKey: \"total\",\n    },\n    {\n      headTitle: \"Average population\",\n      valueKey: \"avg\",\n    },\n    {\n      headTitle: \"Minimum population\",\n      valueKey: \"min\",\n    },\n    {\n      headTitle: \"Maximum population\",\n      valueKey: \"max\",\n    },\n  ],\n  under_1: [\n    {\n      headTitle: \"Level\",\n      valueKey: \"level\",\n    },\n    {\n      headTitle: \"Level Name\",\n      valueKey: \"name\",\n    },\n    {\n      headTitle: \"Total\",\n      valueKey: \"total\",\n    },\n    {\n      headTitle: \"Average population\",\n      valueKey: \"avg\",\n    },\n    {\n      headTitle: \"Minimum population\",\n      valueKey: \"min\",\n    },\n    {\n      headTitle: \"Maximum population\",\n      valueKey: \"max\",\n    },\n  ],\n};\n\nconst ReportTable = (props) => {\n  const { reports, tableData, title } = props;\n\n  return (\n    <div className=\"mt-3\">\n      <div className=\"card\">\n        <div className=\"card-body py-3\">\n          {title.length > 0 && <h4 className=\"mt-2\">{title}</h4>}\n          <div className=\"mt-3 table-container\">\n            <SharedTable>\n              <TableHead>\n                <TableRow>\n                  {tableData.map((data) => (\n                    <TableCell key={data.headTitle}>\n                      <Trans>{data.headTitle}</Trans>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {reports?.map((report, index) => {\n                  return (\n                    <TableRow key={index}>\n                      {tableData.map((data) => (\n                        <TableCell key={data.valueKey}>\n                          {report[data.valueKey] ?? \"-\"}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </SharedTable>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction ProfileOfFacility() {\n  const country = JSON.parse(localStorage.getItem(\"country\")) || {};\n  const { data: reports, isLoading: isReportsLoading } = useQuery(\n    [\"profile-of-facility-reports\"],\n    async () => {\n      const res = await ReportService.getProfOfFac();\n      return res.data;\n    }\n  );\n\n  if (isReportsLoading) {\n    return <Spinner />;\n  }\n\n  return (\n    <div>\n      <h4>\n        <Trans>Report Number: Profile of facility ({country?.country})</Trans>\n      </h4>\n      <h6>Date: {new Date().toISOString().split(\"T\")[0]}</h6>\n      {reports &&\n        Object.keys(reports).map((key) => {\n          const title =\n            key === \"general\"\n              ? \"General population\"\n              : key === \"under_1\"\n              ? \"Under-1 Population\"\n              : \"\";\n          return (\n            <ReportTable\n              reports={reports[key]}\n              tableData={allTableData[key]}\n              title={title}\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nexport default ProfileOfFacility;\n",
    "import authHeader from \"./auth-header\";\nimport ApiManager from \"./axios-config\";\n\nconst API_URL = \"http://127.0.0.1:8000/reports/\";\n\nclass ReportService {\n  getDownloadLinks() {\n    return ApiManager.get(API_URL + \"excel\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getFacSeg(params) {\n    return ApiManager.get(API_URL + \"facseg\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getSubFacPop(params) {\n    return ApiManager.get(API_URL + \"subfacpop\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getFacMap(params) {\n    return ApiManager.get(API_URL + \"facmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapMap(params) {\n    return ApiManager.get(API_URL + \"gapmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemGp(params) {\n    return ApiManager.get(API_URL + \"item-gp\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemFac(params) {\n    return ApiManager.get(API_URL + \"itemfac\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapItem(params) {\n    return ApiManager.get(API_URL + \"gapitem\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getProfOfFac() {\n    return ApiManager.get(API_URL + \"facprof\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getColdProf(degree) {\n    return ApiManager.get(API_URL + \"coldprof\", {\n      headers: { Authorization: authHeader() },\n      params: {\n        degree,\n      },\n    });\n  }\n  getPlanningReport(params) {\n    return ApiManager.get(API_URL + \"planingreport\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getPlanningCCEGap(params) {\n    return ApiManager.get(API_URL + \"gapcce\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapCCEPlan(params) {\n    return ApiManager.get(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  postGapCCEPlan(payload) {\n    return ApiManager.post(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  deleteGapCCEPlan(payload) {\n    return ApiManager.delete(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      data: payload,\n    });\n  }\n  putGapCCEPlan(payload) {\n    return ApiManager.put(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n}\n\nexport default new ReportService();\n",
    "import { Table, TableContainer } from \"@mui/material\";\n\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"
  ],
  "names": [
    "allTableData",
    "by_type",
    "headTitle",
    "valueKey",
    "by_owner",
    "by_power",
    "general",
    "under_1",
    "ReportTable",
    "props",
    "reports",
    "tableData",
    "title",
    "className",
    "length",
    "map",
    "data",
    "report",
    "index",
    "country",
    "JSON",
    "parse",
    "localStorage",
    "getItem",
    "useQuery",
    "ReportService",
    "res",
    "isLoading",
    "Date",
    "toISOString",
    "split",
    "Object",
    "keys",
    "key",
    "API_URL",
    "ApiManager",
    "headers",
    "Authorization",
    "authHeader",
    "params",
    "degree",
    "payload",
    "children"
  ],
  "sourceRoot": ""
}
