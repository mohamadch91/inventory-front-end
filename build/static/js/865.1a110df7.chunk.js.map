{"version":3,"file":"static/js/865.1a110df7.chunk.js","mappings":"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","sources":["app/settings/ItemType.js","app/shared/CloseIcon.js","app/shared/EditIcon.js","app/shared/SharedTable.js"],"sourcesContent":["import { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport ItemsService from \"../services/items.service\";\nimport CloseIcon from \"../shared/CloseIcon\";\nimport EditIcon from \"../shared/EditIcon\";\nimport SharedTable from \"../shared/SharedTable\";\nimport toast from \"react-hot-toast\";\nimport Spinner from \"../shared/Spinner\";\nimport \"./itemClass.scss\";\nimport \"./itemType.scss\";\nimport \"../styles/inputs.scss\";\nimport { Trans } from \"react-i18next\";\n\nfunction ItemType() {\n  const [itemTypes, setItemTypes] = useState([]);\n  const [filteredItemTypes, setFilteredItemTypes] = useState([]);\n  const [itemClasses, setItemClasses] = useState([]);\n  const [editFormData, setEditFormData] = useState({});\n  const [addRowFormData, setAddRowFormData] = useState({});\n  const [editableRowId, setEditableRowId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedItemClass, setSelectedItemClass] = useState(0);\n\n  function getItemClasses() {\n    ItemsService.getItemClasses()\n      .then((res) => {\n        const data = res.data.filter((item) => item.active === true);\n        setItemClasses(data);\n        getItemTypes();\n      })\n      .catch((err) => {\n        toast.error(\"There is a problem loading data\");\n        setIsLoading(false);\n      });\n  }\n\n  function getItemTypes() {\n    ItemsService.getItemTypes()\n      .then((res) => {\n        setItemTypes(res.data);\n        setFilteredItemTypes(res.data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        toast.error(\"There is a problem loading data\");\n        setIsLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    getItemClasses();\n  }, []);\n\n  useEffect(() => {\n    if (selectedItemClass && selectedItemClass !== \"0\") {\n      setFilteredItemTypes(\n        itemTypes?.filter(\n          (item) => item.itemclass === parseInt(selectedItemClass)\n        )\n      );\n    } else {\n      setFilteredItemTypes(itemTypes);\n    }\n  }, [selectedItemClass]);\n\n  useEffect(() => {\n    setAddRowFormData({\n      ...addRowFormData,\n      itemClass: itemClasses[0],\n      active: false,\n      havePQS: false,\n    });\n  }, [itemClasses]);\n\n  function handleEdit(i) {\n    const formData = itemTypes.find((item) => item.id === i.id);\n    setEditFormData(formData);\n    setEditableRowId(i.id);\n  }\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setEditFormData({ ...editFormData, [name]: value });\n  }\n\n  function handleChangeAdd(e) {\n    const { name, value } = e.target;\n    setAddRowFormData({ ...addRowFormData, [name]: value });\n  }\n\n  function handleSubmitEdit() {\n    const isValid = Object.keys(editFormData).every((key) => {\n      return editFormData[key] !== \"\";\n    });\n    if (!isValid) {\n      toast.error(\"Please fill all the fields\");\n    } else {\n      setIsLoading(true);\n      const formToPut = (({ id, title, code, active, havePQS, itemclass }) => ({\n        id,\n        title,\n        code,\n        active,\n        havePQS,\n        itemclass,\n      }))(editFormData);\n      ItemsService.putItemTypes(formToPut)\n        .then((res) => {\n          getItemTypes();\n        })\n        .catch((err) => {\n          toast.error(\"There is a problem sending data\");\n          setIsLoading(false);\n        });\n      setEditableRowId(null);\n      setEditFormData({});\n    }\n  }\n\n  function handleSubmitNew() {\n    const isValid = Object.keys(addRowFormData).every((key) => {\n      return addRowFormData[key] !== \"\";\n    });\n    if (!isValid) {\n      toast.error(\"Please fill all the fields\");\n    } else {\n      setIsLoading(true);\n      let formToPut = (({ title, code, active, havePQS }) => ({\n        title,\n        code,\n        active,\n        havePQS,\n      }))(addRowFormData);\n      if (addRowFormData?.itemClass?.id) {\n        formToPut.itemclass = parseInt(addRowFormData.itemClass.id);\n      } else {\n        formToPut.itemclass = parseInt(addRowFormData.itemClass);\n      }\n      ItemsService.postItemType(formToPut)\n        .then((res) => {\n          getItemTypes();\n          setSelectedItemClass(0);\n        })\n        .catch((err) => {\n          toast.error(\"There is a problem sending data\");\n          setIsLoading(false);\n        });\n      setAddRowFormData({\n        ...addRowFormData,\n        itemClass: itemClasses[0],\n        active: false,\n        havePQS: false,\n        title: \"\",\n      });\n    }\n  }\n\n  function findItemClassById(id) {\n    return itemClasses.find((item) => item.id === id);\n  }\n\n  return (\n    <div className=\"item-class-page\">\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <>\n          <div className=\"mb-4\">\n            <div className=\"mb-2\">\n              <h4 className=\"page-title\">\n                <Trans>Item class Filter to list categories</Trans>\n              </h4>\n            </div>\n            <div className=\"\">\n              <select\n                name=\"itemclass\"\n                onChange={(e) => {\n                  setSelectedItemClass(e.target.value);\n                }}\n                value={selectedItemClass}\n              >\n                <option value={0}>All</option>\n                {itemClasses.map((itemClass, index) => (\n                  <option key={itemClass.id} value={itemClass.id}>\n                    {itemClass.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"add-row mt-4 mb-2\">\n            <h3>\n              {\" \"}\n              <Trans>Enter new item category</Trans>\n            </h3>\n\n            <div className=\"row\">\n              <div className=\"col-md-4 flex-column d-flex\">\n                <label>\n                  <Trans>Title</Trans>\n                </label>\n                <input\n                  name=\"title\"\n                  type=\"text\"\n                  onChange={handleChangeAdd}\n                  value={addRowFormData?.title}\n                  required\n                ></input>\n              </div>\n              <div className=\"col-md-4 flex-column d-flex\">\n                <label>\n                  <Trans>Item class</Trans>\n                </label>\n                <select\n                  name=\"itemClass\"\n                  onChange={handleChangeAdd}\n                  value={addRowFormData?.itemClass}\n                >\n                  {itemClasses.map((item, index) => (\n                    <option\n                      key={item.id}\n                      value={item.id}\n                      selected={index === 0}\n                    >\n                      {item.title}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"col-md-4 d-flex justify-content-center align-items-center\">\n                <label>\n                  <Trans>Active</Trans>\n                </label>\n                <input\n                  name=\"active\"\n                  className=\"mr-4\"\n                  type=\"checkbox\"\n                  onChange={() =>\n                    setAddRowFormData({\n                      ...addRowFormData,\n                      active: !addRowFormData.active,\n                    })\n                  }\n                  checked={addRowFormData?.active}\n                ></input>\n                <label>\n                  <Trans>Is it from PQS/PIS list?</Trans>\n                </label>\n                <input\n                  name=\"havePQS\"\n                  className=\"mr-4\"\n                  type=\"checkbox\"\n                  onChange={() =>\n                    setAddRowFormData({\n                      ...addRowFormData,\n                      havePQS: !addRowFormData.havePQS,\n                    })\n                  }\n                  checked={addRowFormData?.havePQS}\n                ></input>\n                <button className=\"save-btn\" onClick={handleSubmitNew}>\n                  <Trans>Save</Trans>\n                </button>\n              </div>\n            </div>\n          </div>\n          <h3 className=\"page-title mb-3\">\n            <Trans>Item category list</Trans>\n          </h3>\n          <div className=\"mb-2\">\n            <SharedTable>\n              <TableHead>\n                <TableRow>\n                  <TableCell></TableCell>\n                  <TableCell>\n                    <Trans>Title</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Item class</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Code</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Active</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Is it from PQS/PIS list?</Trans>\n                  </TableCell>\n                  <TableCell>\n                    <Trans>Edit</Trans>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredItemTypes?.map((itemType, index) => (\n                  <>\n                    {editableRowId !== itemType.id ? (\n                      <TableRow>\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>{itemType.title}</TableCell>\n                        <TableCell>\n                          {findItemClassById(itemType.itemclass)?.title}\n                        </TableCell>\n                        <TableCell>{itemType.code}</TableCell>\n                        <TableCell>\n                          <input\n                            type=\"checkbox\"\n                            checked={itemType.active}\n                            disabled\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <input\n                            type=\"checkbox\"\n                            checked={itemType.havePQS}\n                            disabled\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <button\n                            className=\"edit-btn\"\n                            onClick={(event) => handleEdit(itemType)}\n                          >\n                            <EditIcon />\n                          </button>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      <TableRow>\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>\n                          <input\n                            name=\"title\"\n                            type=\"text\"\n                            onChange={handleChange}\n                            value={editFormData?.title}\n                            required\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <select\n                            name=\"itemclass\"\n                            onChange={handleChange}\n                            value={editFormData?.itemClass}\n                          >\n                            {itemClasses.map((itemClass, index) => (\n                              <option\n                                key={itemClass.id}\n                                value={itemClass.id}\n                                selected={itemType.itemclass === itemClass.id}\n                              >\n                                {itemClass.title}\n                              </option>\n                            ))}\n                          </select>\n                        </TableCell>\n                        <TableCell>{editFormData?.code}</TableCell>\n                        <TableCell>\n                          <input\n                            name=\"active\"\n                            type=\"checkbox\"\n                            onChange={() =>\n                              setEditFormData({\n                                ...editFormData,\n                                active: !editFormData.active,\n                              })\n                            }\n                            checked={editFormData?.active}\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <input\n                            name=\"havePQS\"\n                            type=\"checkbox\"\n                            onChange={() =>\n                              setEditFormData({\n                                ...editFormData,\n                                havePQS: !editFormData.havePQS,\n                              })\n                            }\n                            checked={editFormData?.havePQS}\n                          ></input>\n                        </TableCell>\n                        <TableCell>\n                          <button\n                            className=\"save-btn\"\n                            onClick={handleSubmitEdit}\n                          >\n                            <Trans>Save</Trans>\n                          </button>\n                          <button\n                            className=\"close-btn\"\n                            onClick={() => setEditableRowId(null)}\n                          >\n                            <CloseIcon />\n                          </button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </TableBody>\n            </SharedTable>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ItemType;\n","function CloseIcon() {\n  return (\n    <>\n      <svg\n        version=\"1.1\"\n        id=\"Layer_1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        x=\"0px\"\n        y=\"0px\"\n        width=\"121.31px\"\n        height=\"122.876px\"\n        viewBox=\"0 0 121.31 122.876\"\n        enableBackground=\"new 0 0 121.31 122.876\"\n        xmlSpace=\"preserve\"\n      >\n        <g>\n          <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M90.914,5.296c6.927-7.034,18.188-7.065,25.154-0.068 c6.961,6.995,6.991,18.369,0.068,25.397L85.743,61.452l30.425,30.855c6.866,6.978,6.773,18.28-0.208,25.247 c-6.983,6.964-18.21,6.946-25.074-0.031L60.669,86.881L30.395,117.58c-6.927,7.034-18.188,7.065-25.154,0.068 c-6.961-6.995-6.992-18.369-0.068-25.397l30.393-30.827L5.142,30.568c-6.867-6.978-6.773-18.28,0.208-25.247 c6.983-6.963,18.21-6.946,25.074,0.031l30.217,30.643L90.914,5.296L90.914,5.296z\"\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nexport default CloseIcon;\n","function EditIcon() {\n  return (\n    <>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 512 512\"\n        width=\"20\"\n        height=\"20\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        enable-background=\"new 0 0 512 512\"\n      >\n        <path d=\"m455.1,137.9l-32.4,32.4-81-81.1 32.4-32.4c6.6-6.6 18.1-6.6 24.7,0l56.3,56.4c6.8,6.8 6.8,17.9 0,24.7zm-270.7,271l-81-81.1 209.4-209.7 81,81.1-209.4,209.7zm-99.7-42l60.6,60.7-84.4,23.8 23.8-84.5zm399.3-282.6l-56.3-56.4c-11-11-50.7-31.8-82.4,0l-285.3,285.5c-2.5,2.5-4.3,5.5-5.2,8.9l-43,153.1c-2,7.1 0.1,14.7 5.2,20 5.2,5.3 15.6,6.2 20,5.2l153-43.1c3.4-0.9 6.4-2.7 8.9-5.2l285.1-285.5c22.7-22.7 22.7-59.7 0-82.5z\" />\n      </svg>\n    </>\n  );\n}\n\nexport default EditIcon;\n","import { Table, TableContainer } from \"@mui/material\";\n\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"],"names":["useState","itemTypes","setItemTypes","filteredItemTypes","setFilteredItemTypes","itemClasses","setItemClasses","editFormData","setEditFormData","addRowFormData","setAddRowFormData","editableRowId","setEditableRowId","isLoading","setIsLoading","selectedItemClass","setSelectedItemClass","getItemTypes","ItemsService","then","res","data","catch","err","toast","handleChange","e","target","name","value","handleChangeAdd","handleSubmitEdit","Object","keys","every","key","formToPut","id","title","code","active","havePQS","itemclass","useEffect","filter","item","parseInt","itemClass","className","onChange","map","index","type","required","selected","checked","onClick","itemType","find","disabled","event","i","formData","handleEdit","version","xmlns","xmlnsXlink","x","y","width","height","viewBox","enableBackground","xmlSpace","fillRule","clipRule","d","children"],"sourceRoot":""}