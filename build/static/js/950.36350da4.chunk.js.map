{"version":3,"file":"static/js/950.36350da4.chunk.js","mappings":"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","sources":["app/services/auth-header.js","app/services/user.service.js","app/settings/Level.js"],"sourcesContent":["/**\n * \n * @returns {String} return the Bearer token for Authorization header\n */\n export default function authHeader() {\n  /**\n   * get the token from local storage\n   */\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n /**\n  * if token is not null then return the token\n  */\n  if (user && user.access) {\n    // For Spring Boot back-end\n    return  \"Bearer \" + user.access ;\n    /**\n     * else return null\n     */\n  } else {\n    return {\n      \n    };\n  }\n}\n","import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = \"http://5.182.47.38:8001/settings/\";\n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + \"all\");\n  }\n  addcountry(country) {\n    console.log(country);\n    return axios.post(API_URL + \"country/\", country, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  editcountry(country) {\n    console.log(country);\n    return axios.put(API_URL + \"country/\", country, {\n      headers: {\n        Authorization: authHeader(),\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n  }\n  addlevel(level) {\n    return axios.post(API_URL + \"level\", level, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getLevels() {\n    return axios.get(API_URL + \"level\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  putLevels(level) {\n    console.log(\"vayyy\")\n    return axios.put(API_URL + \"level\", level, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getUserBoard() {\n    return axios.get(API_URL + \"user\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + \"mod\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n\n  getAdminBoard() {\n    return axios.get(API_URL + \"admin\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n}\n\nexport default new UserService();\n","import React, { Component, useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport bsCustomFileInput from \"bs-custom-file-input\";\nimport UserService from \"../services/user.service\";\n// import ReactDualRangeSlider from 'react-dual-range-slider'\nimport MultiRangeSlider from \"../components/Dualslider\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\n\nconst Level = (update) => {\n  const [startDate, setstartDate] = useState(new Date());\n  const [validated, setvalidated] = useState(false);\n  const [minPop, setminPop] = useState(0);\n  const [maxPop, setmaxPop] = useState(100);\n\n  const [name, setname] = useState(\"\");\n  const [number, setnumber] = useState(1);\n  const [current2, setcurrent2] = useState(0.0);\n  const [current20, setcurrent20] = useState(0.0);\n  const [current25, setcurrent25] = useState(0.0);\n  const [current70, setcurrent70] = useState(0.0);\n  const [currentdry, setcurrentdry] = useState(0.0);\n  const [planned2, setplanned2] = useState(0.0);\n  const [planned20, setplanned20] = useState(0.0);\n  const [planned25, setplanned25] = useState(0.0);\n  const [planned70, setplanned70] = useState(0.0);\n  const [planneddry, setplanneddry] = useState(0.0);\n  const [parent, setParent] = useState(null);\n  const [country, setcountry] = useState(\n    JSON.parse(localStorage.getItem(\"country\"))\n  );\n\n  // form event targets\n  const [levelNumber, setLevelNumber] = useState(1);\n  const levelNumberHandler = (event) => {\n    setLevelNumber(parseInt(event.target.value));\n  };\n\n  // start steps\n  const steps = [\"Add level\", \"Current\", \"Planned\"];\n  const [activeStep, setActiveStep] = useState(0);\n  const [skipped, setSkipped] = useState(new Set());\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  // end steps\n\n  const handleChange = (date) => {\n    setstartDate(date);\n  };\n  const handlemin = (min) => {\n    setminPop(min);\n  };\n  const handlemax = (max) => {\n    setmaxPop(max);\n  };\n  useEffect(() => {\n    bsCustomFileInput.init();\n  }, []);\n\n  const handleSubmit = (event) => {\n    if (levelNumber === 1) {\n      setParent(null);\n    } else {\n      setParent(levelNumber - 1);\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      const data = {\n        number: levelNumber,\n        maxpop: maxPop,\n        minpop: minPop,\n        uppervol: current2,\n        undervol: current20,\n        m25vol: current25,\n        m70vol: current70,\n        m25volnew: planned25,\n        m70volnew: planned70,\n        uppervolnew: planned20,\n        undervolnew: planned2,\n        name: name,\n        dryvol: currentdry,\n        dryvolnew: planneddry,\n        country: 1,\n        parent: parent,\n      };\n      UserService.addlevel(data)\n        .then((response) => {\n          let newSkipped = skipped;\n          if (isStepSkipped(activeStep)) {\n            newSkipped = new Set(newSkipped.values());\n            newSkipped.delete(activeStep);\n          }\n          setActiveStep((prevActiveStep) => prevActiveStep + 1);\n          setSkipped(newSkipped);\n\n          setstartDate(new Date());\n          setvalidated(false);\n          setminPop(0);\n          setmaxPop(100);\n          setname(\"\");\n          setnumber(1);\n          setcurrent2();\n          setcurrent20();\n          setcurrent25();\n          setcurrent70();\n          setcurrentdry();\n          setplanned2();\n          setplanned20();\n          setplanned25();\n          setplanned70();\n          setplanneddry();\n          setParent();\n          // this.props.history.push('/level');\n        })\n        .catch((error) => {\n          // console.log(error);\n        });\n    }\n\n    //  this.setState({ validated: true });\n    setvalidated(true);\n  };\n  const levelvalidator = () => {\n    if (name.length > 0) {\n      return true;\n    }\n  };\n  const minpopvalidator = () => {\n    if (minPop.toString().length > 0) {\n      return true;\n    }\n  };\n  const maxpopvalidator = () => {\n    if (maxPop.toString().length > 0) {\n      return true;\n    }\n  };\n  const capacityvalidator = (text) => {\n    if (text < 0) {\n      return false;\n    }\n    if (text.toString().length > 0) {\n      return true;\n    }\n  };\n\n  return (\n    <Form\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n      className=\"form-sample\"\n    >\n      <Box sx={{ width: \"100%\" }}>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const labelProps = {};\n            if (isStepOptional(index)) {\n              // labelProps.optional = (\n              //   <Typography variant=\"caption\">Optional</Typography>\n              // );\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        {activeStep === steps.length ? (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>\n              All steps completed - you have submited your level.\n            </Typography>\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n              <Box sx={{ flex: \"1 1 auto\" }} />\n              <Button onClick={handleReset} variant=\"contained\">\n                Add new level\n              </Button>\n            </Box>\n          </React.Fragment>\n        ) : activeStep === 0 ? (\n          <React.Fragment>\n            <div className=\"row\">\n              <div className=\"col-12 grid-margin text-black\">\n                <h4 className=\"card-title\">\n                  <Typography sx={{ mt: 2, mb: 1 }}>\n                    Step {activeStep + 1}\n                  </Typography>{\" \"}\n                  Level configurations\n                </h4>\n\n                <p className=\"card-description h3\"> Level info </p>\n                <div className=\"row\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-3 col-form-label control-label\">\n                      Level number\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <Form.Control\n                        className=\"form-select\"\n                        as=\"select\"\n                        onChange={levelNumberHandler}\n                        value={levelNumber}\n                      >\n                        {[...Array(country.levels)].map((x, i) => (\n                          <option value={i + 1}>{i + 1}</option>\n                        ))}\n                      </Form.Control>\n                    </div>\n                  </Form.Group>\n                </div>\n\n                <div className=\"row\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-3 col-form-label control-label\">\n                      Level name\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <Form.Control\n                        required\n                        isValid={levelvalidator()}\n                        value={name}\n                        onChange={(e) => {\n                          setname(e.target.value);\n                        }}\n                        type=\"text\"\n                      />\n                    </div>\n                  </Form.Group>\n                </div>\n                <div className=\"row\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-3 col-form-label control-label\">\n                      Min {country.poptarget} at this level\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <Form.Control\n                        required\n                        isValid={minpopvalidator()}\n                        value={minPop}\n                        onChange={(e) => {\n                          setminPop(e.target.value);\n                        }}\n                        type=\"number\"\n                      />\n                    </div>\n                  </Form.Group>\n                </div>\n                <div className=\"row\">\n                  <Form.Group className=\"row\">\n                    <label className=\"col-sm-3 col-form-label control-label\">\n                      Max {country.poptarget} at this level\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <Form.Control\n                        required\n                        isValid={maxpopvalidator()}\n                        value={maxPop}\n                        onChange={(e) => {\n                          setmaxPop(e.target.value);\n                        }}\n                        type=\"number\"\n                      />\n                    </div>\n                  </Form.Group>\n                </div>\n\n                <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                  <Button\n                    color=\"inherit\"\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                    sx={{ mr: 1 }}\n                    variant=\"outlined\"\n                  >\n                    Back\n                  </Button>\n                  <Box sx={{ flex: \"1 1 auto\" }} />\n                  {isStepOptional(activeStep) && (\n                    <Button\n                      color=\"inherit\"\n                      onClick={handleSkip}\n                      sx={{ mr: 1 }}\n                      variant=\"contained\"\n                    >\n                      Skip\n                    </Button>\n                  )}\n\n                  <Button onClick={handleNext} variant=\"contained\">\n                    {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n                  </Button>\n                </Box>\n              </div>\n            </div>\n          </React.Fragment>\n        ) : activeStep === 1 ? (\n          <React.Fragment>\n            <div className=\"row\">\n              <div className=\"col-md-12 grid-margin text-black\">\n                <h4 className=\"card-title\">\n                  <Typography sx={{ mt: 2, mb: 1 }}>\n                    Step{activeStep + 1}\n                  </Typography>{\" \"}\n                  Current\n                </h4>\n                <p className=\"card-description\"> Current Capacities </p>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    (+25 C) in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(current25)}\n                      value={current25}\n                      onChange={(e) => {\n                        setcurrent25(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    (+2- +8 C) in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(current2)}\n                      value={current2}\n                      onChange={(e) => {\n                        setcurrent2(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    -20 C in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(current20)}\n                      value={current20}\n                      onChange={(e) => {\n                        setcurrent20(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    -70 C in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(current70)}\n                      value={current70}\n                      onChange={(e) => {\n                        setcurrent70(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    Dry Store in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(currentdry)}\n                      value={currentdry}\n                      onChange={(e) => {\n                        setcurrentdry(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n              </div>\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                <Button\n                  color=\"inherit\"\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  sx={{ mr: 1 }}\n                  variant=\"outlined\"\n                >\n                  Back\n                </Button>\n                <Box sx={{ flex: \"1 1 auto\" }} />\n                {/* {isStepOptional(activeStep) && (\n                  <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\n                    Skip\n                  </Button>\n                )} */}\n\n                <Button onClick={handleNext} variant=\"contained\">\n                  {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n                </Button>\n              </Box>\n            </div>\n          </React.Fragment>\n        ) : activeStep === 2 ? (\n          <React.Fragment>\n            <div className=\"row\">\n              <div className=\"col-md-12 grid-margin text-black\">\n                <h4 className=\"card-title\">\n                  <Typography sx={{ mt: 2, mb: 1 }}>\n                    Step {activeStep + 1}\n                  </Typography>{\" \"}\n                  Planned\n                </h4>\n                <p className=\"card-description\"> planned Capacity </p>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    (+25 C) in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(planned25)}\n                      value={planned25}\n                      onChange={(e) => {\n                        setplanned25(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    (+2 - +8 C) in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isValid={capacityvalidator(planned2)}\n                      value={planned2}\n                      onChange={(e) => {\n                        setplanned2(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    -20 C in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isInvalid={!capacityvalidator(planned20)}\n                      isValid={capacityvalidator(planned20)}\n                      value={planned20}\n                      onChange={(e) => {\n                        setplanned20(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    -70 C in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isInvalid={!capacityvalidator(planned70)}\n                      isValid={capacityvalidator(planned70)}\n                      value={planned70}\n                      onChange={(e) => {\n                        setplanned70(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-3 col-form-label\">\n                    Dry Store in cm3\n                  </label>\n                  <div className=\"col-sm-9\">\n                    <Form.Control\n                      required\n                      isInvalid={!capacityvalidator(planneddry)}\n                      isValid={capacityvalidator(planneddry)}\n                      value={planneddry}\n                      onChange={(e) => {\n                        setplanneddry(parseFloat(e.target.value));\n                      }}\n                      type=\"number\"\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                </Form.Group>\n              </div>\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                <Button\n                  color=\"inherit\"\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  sx={{ mr: 1 }}\n                  variant=\"outlined\"\n                >\n                  Back\n                </Button>\n                <Box sx={{ flex: \"1 1 auto\" }} />\n                {isStepOptional(activeStep) && (\n                  <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\n                    Skip\n                  </Button>\n                )}\n\n                <Button onClick={handleSubmit} variant=\"contained\">\n                  Submit\n                </Button>\n              </Box>\n            </div>\n          </React.Fragment>\n        ) : (\n          \"hello\"\n        )}\n      </Box>\n    </Form>\n  );\n};\n\nexport default Level;\n"],"names":["authHeader","user","JSON","parse","localStorage","getItem","access","API_URL","UserService","axios","country","console","log","headers","Authorization","level","update","useState","Date","setstartDate","validated","setvalidated","minPop","setminPop","maxPop","setmaxPop","name","setname","setnumber","current2","setcurrent2","current20","setcurrent20","current25","setcurrent25","current70","setcurrent70","currentdry","setcurrentdry","planned2","setplanned2","planned20","setplanned20","planned25","setplanned25","planned70","setplanned70","planneddry","setplanneddry","parent","setParent","levelNumber","setLevelNumber","steps","activeStep","setActiveStep","Set","skipped","setSkipped","isStepOptional","step","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","handleBack","handleSkip","Error","prevSkipped","add","useEffect","bsCustomFileInput","handleSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","data","number","maxpop","minpop","uppervol","undervol","m25vol","m70vol","m25volnew","m70volnew","uppervolnew","undervolnew","dryvol","dryvolnew","then","response","catch","error","capacityvalidator","text","toString","length","Form","noValidate","onSubmit","className","Box","sx","width","Stepper","map","label","index","stepProps","completed","Step","StepLabel","Typography","mt","mb","display","flexDirection","pt","flex","Button","onClick","variant","as","onChange","parseInt","target","value","Array","levels","x","i","required","isValid","levelvalidator","e","type","poptarget","minpopvalidator","maxpopvalidator","color","disabled","mr","parseFloat","placeholder","min","isInvalid"],"sourceRoot":""}