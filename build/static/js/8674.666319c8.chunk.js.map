{"version":3,"file":"static/js/8674.666319c8.chunk.js","mappings":"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","sources":["app/dashboard/warnings/tables/WarningsTableCheckbox.js","app/dashboard/warnings/tables/WarningsTable.js","app/dashboard/warnings/tables/WarningsTablePage.js"],"sourcesContent":["import React from \"react\";\nimport { Trans } from \"react-i18next\";\n/**\n * @param  {} props\n * component for show checkbox in wanings\n */\nconst WarningsTableCheckbox = (props) => {\n  return (\n    <div className=\"form-check pl-2 \">\n      <label className=\"form-check-label\">\n        <input\n          onChange={(e) => props.onChange(e)}\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          value={props.value}\n        />\n        <i className=\"input-helper\" />\n        <Trans>{props.label}</Trans>\n      </label>\n    </div>\n  );\n};\n\nexport default WarningsTableCheckbox;\n","import React from \"react\";\nimport WarningsTableCheckbox from \"./WarningsTableCheckbox\";\nimport { Trans } from \"react-i18next\";\n/**\n * @param  {OBJECT} prop\n * component for show warning for each item\n */\nconst WarningsTable = (props) => {\n  const { data, setState, state } = props;\n\n  const checkedHandler = (e) => {\n    const value = e.target.value;\n\n    if (state.includes(value)) {\n      setState((s) => s.filter((el) => el !== value));\n    } else {\n      setState((s) => [...s, value]);\n    }\n  };\n\n  return (\n    <div className=\"col-lg-12 stretch-card\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h4 className=\"card-title\">Warnings Info</h4>\n          <div className=\"table-responsive\">\n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>\n                    <Trans>#</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Maintenance</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Items category</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Code</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Deadline</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Service interval</Trans>{\" \"}\n                  </th>\n                  <th>\n                    {\" \"}\n                    <Trans>Done</Trans>{\" \"}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((el, i) => {\n                  return (\n                    <tr key={el.id} className=\"table-danger\">\n                      <td key={el.id }> {i + 1} </td>\n                      <td key={i + el.name}> {el.name} </td>\n                      <td key={i + el.item_type}> {el.item_type} </td>\n\n                      <td key={i + el.code}> {el.code} </td>\n                      <td key={i + el.deadline}> {el.deadline} </td>\n                      <td key={i + el.interval}> {el.interval} </td>\n                      <td key={i + \"A\"}>\n                        <WarningsTableCheckbox\n                          onChange={checkedHandler}\n                          value={el.id}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <button\n              type=\"button\"\n              className=\" mt-3 btn btn-primary btn-fw\"\n              onClick={props.onSubmit}\n            >\n              <Trans>Mark as done</Trans>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WarningsTable;\n","import React, { Fragment } from \"react\";\nimport WarningsTable from \"./WarningsTable\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\n\nimport Spinner from \"../../../shared/Spinner\";\nimport DashboardService from \"../../../services/dashboard.service\";\n\nimport toast from \"react-hot-toast\";\n/**\n * page include warning table\n */\nconst WarningsTablePage = () => {\n  const [selectedAsDone, setSelectedAsDone] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const params = useParams();\n  const history = useHistory();\n\n  const { data: tableData, isLoading: warningDataIsLoading } = useQuery(\n    [],\n    async () => {\n      const res = await DashboardService.getWarningsInfo(\"?\" + params.wType);\n      return res.data;\n    },\n    {\n      refetchOnMount: true,\n    }\n  );\n  /**\n   * send API reqeuest when maintance done\n   */\n  const onMarkAsDoneHandler = async () => {\n    const payload = [];\n    selectedAsDone.map((el) => {\n      payload.push({ id: el, done: true });\n    });\n    try {\n      setIsLoading(true);\n      const res = await DashboardService.postWarningsAsDone(payload);\n      if (res.status === 200) {\n        setIsLoading(false);\n        toast.success(\"Done like a charm Boss! ðŸ˜‰\");\n        history.push(\"/dashboard\");\n      }\n    } catch (e) {\n      toast.error(\n        \"There was a problem reaching server, try again in a moment pls\"\n      );\n    }\n  };\n\n  if (warningDataIsLoading || tableData.length === 0 || isLoading) {\n    return <Spinner />;\n  }\n\n  return (\n    <Fragment>\n      {tableData && (\n        <WarningsTable\n          data={tableData}\n          setState={setSelectedAsDone}\n          state={selectedAsDone}\n          onSubmit={onMarkAsDoneHandler}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default WarningsTablePage;\n"],"names":["props","className","onChange","e","type","value","Trans","label","data","setState","state","checkedHandler","target","includes","s","filter","el","map","i","id","name","item_type","code","deadline","interval","onClick","onSubmit","React","selectedAsDone","setSelectedAsDone","isLoading","setIsLoading","params","useParams","history","useHistory","useQuery","DashboardService","wType","res","refetchOnMount","tableData","warningDataIsLoading","onMarkAsDoneHandler","payload","push","done","status","toast","length","Spinner","Fragment"],"sourceRoot":""}