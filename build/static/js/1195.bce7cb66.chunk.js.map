{
  "version": 3,
  "file": "static/js/1195.bce7cb66.chunk.js",
  "mappings": "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",
  "sources": [
    "app/reports/ItemGroupReport.js",
    "app/services/report.service.js",
    "app/shared/SharedTable.js"
  ],
  "sourcesContent": [
    "import React, { useState } from \"react\";\nimport { Translation, Trans } from \"react-i18next\";\nimport { useQuery } from \"react-query\";\nimport { Form } from \"react-bootstrap\";\nimport ReportService from \"../services/report.service\";\nimport \"./form.scss\";\nimport Spinner from \"../shared/Spinner\";\nimport SharedTable from \"../shared/SharedTable\";\nimport { TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport \"../styles/table.scss\";\nimport { toast } from \"react-hot-toast\";\n\nconst defaultValues = {\n  name: \"\",\n  code: \"\",\n  level: \"-1\",\n  type: \"-1\",\n  power: \"-1\",\n  item_class: \"-1\",\n  item_type: \"-1\",\n  physical: \"-1\",\n  financial: \"-1\",\n  working: \"-1\",\n  item_power: \"-1\",\n  manufacturer: \"-1\",\n  pqs: \"\",\n  year_from: \"-1\",\n  year_to: \"-1\",\n  capacity_from: \"\",\n  capacity_to: \"\",\n};\n\nfunction ItemGroupReport() {\n  const [filterValues, setFilterValues] = useState(defaultValues);\n  const [selectedItem, setSelectedItem] = useState(null);\n\n  const { data: itemGpHelper, isLoading: isItemGpHelperLoading } = useQuery(\n    [\"item-gp-helper\"],\n    async () => {\n      const res = await ReportService.getItemGp({ help: true });\n      return res.data;\n    }\n  );\n\n  const {\n    data: reports,\n    isLoading: isReportsLoading,\n    refetch: fetchReports,\n  } = useQuery(\n    [\"item-gp-report\"],\n    async () => {\n      const params = {\n        help: false,\n      };\n      for (const key in filterValues) {\n        const filter = filterValues[key];\n        if (filter.length > 0 && filter !== \"-1\") {\n          params[key] = filter;\n        }\n      }\n      const res = await ReportService.getItemGp(params);\n        if (res.data.length === 0) {\n                   toast.error(<Trans>No data found</Trans>);\n\n        }\n      return res.data;\n    },\n    {\n      refetchOnMount: false,\n      enabled: false,\n    }\n  );\n\n  if (isItemGpHelperLoading || isReportsLoading) {\n    return <Spinner />;\n  }\n  const printFilterValues = () => {\n    let filter = \"\";\n    for (const key in filterValues) {\n      const value = filterValues[key];\n      if (value.length > 0 && value !== \"-1\") {\n        if (key === \"level\"){\n          filter += `Level : ${value}- ${itemGpHelper.level.find((level) => level.id === parseInt(value)).name} `;\n        }\n        else if (key === \"type\"){\n          filter += `${key} : ${itemGpHelper.type.find((type) => type.id === parseInt(value)).name} `;\n        }\n        else if (key === \"power\"){\n          filter += `Power source : ${\n            itemGpHelper.power.find((power) => power.id === parseInt(value))\n              .name\n          } `;\n        }\n        else if (key === \"item_class\"){\n           const item_class = selectedItem.item_class_name;\n           filter += `Item class: ${item_class}, `;\n        }\n        else if (key === \"item_type\"){\n          const item_type = selectedItem.item_type.filter(\n            (item) => item.id === parseInt(value)\n          );\n          filter += `Items category: ${item_type[0]?.name}, `;\n        }\n        else if (key === \"physical\"){\n          filter += `Physical = ${itemGpHelper.physical.find((physical) => physical.id === parseInt(value)).name}, `;\n        }\n        else if (key === \"financial\"){\n\n          filter += `Financial : ${\n            itemGpHelper.financial.find(\n              (financial) => financial.id === parseInt(value)\n            ).name\n          } `;\n        }\n        else if (key === \"working\"){\n          filter += `Working : ${\n            itemGpHelper.working.find(\n              (working) => working.id === parseInt(value)\n            ).name\n          } ,`;\n        }\n        else if (key === \"item_power\"){\n          filter += `Item Power source : ${\n            itemGpHelper.item_power.find(\n              (item_power) => item_power.id === parseInt(value)\n            ).name\n          }, `;\n        }\n        else if (key === \"manufacturer\") {\n          const item_type = selectedItem.manufacturer.filter(\n            (item) => item.id === parseInt(value)\n          );\n          filter += `Manufacturer: ${item_type[0]?.name}, `;\n        } else if (key === \"year_from\") {\n          filter += `From year :${value} ,`;\n        } else if (key === \"year_to\") {\n          filter += `To year =${value}, `;\n        } else if (key === \"capacity_from\") {\n          filter += `From capaciti :${value} ,`;\n        } else if (key === \"capacity_to\") {\n          filter += `To capacity :${value}, `;\n        } else if (key === \"pqs\") {\n          filter += `PQS Code:${value}, `;\n        } else {\n          filter += `${key}=${value}, `;\n        }\n      }\n    }\n    return filter;\n  }\n  const country = JSON.parse(localStorage.getItem(\"country\")) || {};\n\n  return (\n    <div>\n      <h3 className=\"page-title mb-3\">\n        <Trans>Item grouped report</Trans>\n      </h3>\n      <div className=\"mt-3\">\n        <div className=\"card\">\n          <div className=\"card-body py-3\">\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                fetchReports();\n              }}\n            >\n              <h4>\n                <Trans>Filters</Trans>\n              </h4>\n              <div className=\"row mt-5\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Facility Name</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-control col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          name: value,\n                        }));\n                      }}\n                      value={filterValues.name}\n                    />\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Code</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-control col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          code: value,\n                        }));\n                      }}\n                      value={filterValues.code}\n                    />\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Levels</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          level: value,\n                        }));\n                      }}\n                      value={filterValues.level}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.level.map((lev) => (\n                        <option key={lev.id} value={lev.id}>\n                          {`${lev.id} - ${lev.name}`}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Type</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          type: value,\n                        }));\n                      }}\n                      value={filterValues.type}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.type.map((ty) => (\n                        <option key={ty.id} value={ty.id}>\n                          {ty.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Power source</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          power: value,\n                        }));\n                      }}\n                      value={filterValues.power}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.power.map((pow) => (\n                        <option key={pow.id} value={pow.id}>\n                          {pow.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <h4 className=\"mt-1\">\n                <Trans>Item Options</Trans>\n              </h4>\n              <div className=\"row mt-5\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Item class</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          item_class: value,\n                          item_type: \"-1\",\n                          manufacturer: \"-1\",\n                        }));\n                        setSelectedItem(\n                          itemGpHelper.item.find(\n                            (i) => i.item_class_id === +value\n                          )\n                        );\n                      }}\n                      value={filterValues.item_class}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.item?.map((i) => (\n                        <option key={i.item_class_id} value={i.item_class_id}>\n                          {i.item_class_name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Items category</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      disabled={!selectedItem}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          item_type: value,\n                        }));\n                      }}\n                      value={filterValues.item_type}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {selectedItem?.item_type.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Physical condition</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          physical: value,\n                        }));\n                      }}\n                      value={filterValues.physical}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.physical?.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Working condition</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          working: value,\n                        }));\n                      }}\n                      value={filterValues.working}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.working?.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Financial source</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          financial: value,\n                        }));\n                      }}\n                      value={filterValues.financial}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.financial?.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Energy source for cold chain equipment</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          item_power: value,\n                        }));\n                      }}\n                      value={filterValues.item_power}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {itemGpHelper?.item_power?.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>PQS/PIS Code</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-control col-sm-8\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          pqs: value,\n                        }));\n                      }}\n                      value={filterValues.pqs}\n                    />\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-12 col-lg-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Manufacturer</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-8\"\n                      disabled={!selectedItem}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          manufacturer: value,\n                        }));\n                      }}\n                      value={filterValues.manufacturer}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {selectedItem?.manufacturer?.map((i) => (\n                        <option key={i.id} value={i.id}>\n                          {i.name}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n              </div>\n              <div className=\"row mt-1\">\n                <div className=\"col-sm-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Year installed</Trans>:\n                    </label>\n                    <label className=\"label col-sm-2\">\n                      <Trans>from</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-2\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          year_from: value,\n                        }));\n                      }}\n                      value={filterValues.year_from}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {Array.from({ length: 35 }).map((_, i) => {\n                        const year = new Date().getUTCFullYear() - i;\n                        return (\n                          <option key={year} value={year}>\n                            {year}\n                          </option>\n                        );\n                      })}\n                    </Form.Control>\n                    <label className=\"label col-sm-2\">\n                      <Trans>to</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-select col-sm-2\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          year_to: value,\n                        }));\n                      }}\n                      value={filterValues.year_to}\n                      as=\"select\"\n                    >\n                      <Translation>\n                        {(t, { i18n }) => (\n                          <option i18n value=\"-1\" selected>\n                            {t(\"Please select\")}\n                          </option>\n                        )}\n                      </Translation>\n                      {Array.from({\n                        length:\n                          new Date().getUTCFullYear() -\n                          filterValues.year_from +\n                          1,\n                      }).map((_, i) => {\n                        const year = new Date().getUTCFullYear() - i;\n                        return (\n                          <option key={year} value={year}>\n                            {year}\n                          </option>\n                        );\n                      })}\n                    </Form.Control>\n                  </Form.Group>\n                </div>\n                <div className=\"col-sm-6\">\n                  <Form.Group className=\"row\">\n                    <label className=\"label col-sm-4\">\n                      <Trans>Capacity</Trans>:\n                    </label>\n                    <label className=\"label col-sm-2\">\n                      <Trans>from</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-control col-sm-2\"\n                      type=\"number\"\n                      min={0}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          capacity_from: value,\n                        }));\n                      }}\n                      value={filterValues.capacity_from}\n                    />\n\n                    <label className=\"label col-sm-2\">\n                      <Trans>to</Trans>:\n                    </label>\n                    <Form.Control\n                      className=\"form-control col-sm-2\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setFilterValues((preValues) => ({\n                          ...preValues,\n                          capacity_to: value,\n                        }));\n                      }}\n                      value={filterValues.capacity_to}\n                      type=\"number\"\n                      min={0}\n                    />\n                  </Form.Group>\n                </div>\n              </div>\n\n              <div className=\"row mt-4\">\n                <div className=\"col-sm-2\">\n                  <button type=\"submit\" className=\"btn btn-primary fs-5\">\n                    <Trans>Reports</Trans>\n                  </button>\n                </div>\n                <div className=\"col-sm-3\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary fs-5\"\n                    onClick={() => {\n                      setFilterValues(defaultValues);\n                      window.location.reload();\n                    }}\n                  >\n                    <Trans>Clear Filter</Trans>\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-3\">\n        <div className=\"card\">\n          <div className=\"card-body py-3\">\n            <h4>\n              <Trans>Report</Trans> : <Trans>Item grouped report</Trans> (\n              {country?.country})\n            </h4>\n            <h6>\n              <Trans>Filter</Trans> : {\"\"} {printFilterValues()}\n            </h6>\n\n            <h6>\n              <Trans>Date</Trans>: {new Date().toLocaleDateString(\"en-GB\")}\n            </h6>\n            <div className=\"mt-3 table-container\">\n              <SharedTable>\n                <TableHead>\n                  <TableRow>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Type</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>Model</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-1\">\n                      <Trans>Manufacturer</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-2\">\n                      <Trans>PQS/PIS Code</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-1\">\n                      <Trans>Count</Trans>\n                    </TableCell>\n                    <TableCell className=\"col-sm-4\">\n                      <Trans>Facility list</Trans>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {reports?.map((report, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell className=\"col-sm-2\">\n                          {report.item_type ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {report.model ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-1\">\n                          {report.manufacturer ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-2\">\n                          {report.pqs ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-1\">\n                          {report.count ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"col-sm-4\">\n                          {report.facility?.map(\n                            (fac, i) =>\n                              `${fac.name}${\n                                i === report.facility.length - 1 ? \"\" : \", \"\n                              }`\n                          ) ?? \"-\"}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </SharedTable>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ItemGroupReport;\n",
    "import authHeader from \"./auth-header\";\nimport ApiManager from \"./axios-config\";\n\nconst API_URL = \"https://demoapi1.invgap.org/reports/\";\n\nclass ReportService {\n  getDownloadLinks() {\n    return ApiManager.get(API_URL + \"excel\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getFacSeg(params) {\n    return ApiManager.get(API_URL + \"facseg\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getSubFacPop(params) {\n    return ApiManager.get(API_URL + \"subfacpop\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getFacMap(params) {\n    return ApiManager.get(API_URL + \"facmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapMap(params) {\n    return ApiManager.get(API_URL + \"gapmap\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemGp(params) {\n    return ApiManager.get(API_URL + \"item-gp\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getItemFac(params) {\n    return ApiManager.get(API_URL + \"itemfac\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapItem(params) {\n    return ApiManager.get(API_URL + \"gapitem\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getProfOfFac() {\n    return ApiManager.get(API_URL + \"facprof\", {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  getColdProf(degree) {\n    return ApiManager.get(API_URL + \"coldprof\", {\n      headers: { Authorization: authHeader() },\n      params: {\n        degree,\n      },\n    });\n  }\n  getPlanningReport(params) {\n    return ApiManager.get(API_URL + \"planingreport\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getPlanningCCEGap(params) {\n    return ApiManager.get(API_URL + \"gapcce\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  getGapCCEPlan(params) {\n    return ApiManager.get(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      params,\n    });\n  }\n  postGapCCEPlan(payload) {\n    return ApiManager.post(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  deleteGapCCEPlan(payload) {\n    return ApiManager.delete(API_URL + \"gapccePlan\", {\n      headers: { Authorization: authHeader() },\n      data: payload,\n    });\n  }\n  putGapCCEPlan(payload) {\n    return ApiManager.put(API_URL + \"gapccePlan\", payload, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n  savegaps(payload, saved) {\n    return ApiManager.post(API_URL + \"gapsave?condition=\" + payload, saved, {\n      headers: { Authorization: authHeader() },\n    });\n  }\n}\n\nexport default new ReportService();\n",
    "import { Table, TableContainer } from \"@mui/material\";\n\nfunction SharedTable({ children }) {\n  return (\n    <>\n      <TableContainer>\n        <Table>{children}</Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default SharedTable;\n"
  ],
  "names": [
    "defaultValues",
    "name",
    "code",
    "level",
    "type",
    "power",
    "item_class",
    "item_type",
    "physical",
    "financial",
    "working",
    "item_power",
    "manufacturer",
    "pqs",
    "year_from",
    "year_to",
    "capacity_from",
    "capacity_to",
    "useState",
    "filterValues",
    "setFilterValues",
    "selectedItem",
    "setSelectedItem",
    "useQuery",
    "ReportService",
    "help",
    "res",
    "data",
    "itemGpHelper",
    "isItemGpHelperLoading",
    "isLoading",
    "key",
    "params",
    "filter",
    "length",
    "toast",
    "refetchOnMount",
    "enabled",
    "reports",
    "isReportsLoading",
    "fetchReports",
    "refetch",
    "country",
    "JSON",
    "parse",
    "localStorage",
    "getItem",
    "className",
    "onSubmit",
    "e",
    "preventDefault",
    "onChange",
    "value",
    "target",
    "preValues",
    "as",
    "t",
    "i18n",
    "selected",
    "map",
    "lev",
    "id",
    "ty",
    "pow",
    "item",
    "find",
    "i",
    "item_class_id",
    "item_class_name",
    "disabled",
    "Array",
    "from",
    "_",
    "year",
    "Date",
    "getUTCFullYear",
    "min",
    "onClick",
    "window",
    "location",
    "reload",
    "parseInt",
    "printFilterValues",
    "toLocaleDateString",
    "report",
    "index",
    "model",
    "count",
    "facility",
    "fac",
    "API_URL",
    "ApiManager",
    "headers",
    "Authorization",
    "authHeader",
    "degree",
    "payload",
    "saved",
    "children"
  ],
  "sourceRoot": ""
}
