import React, { useState } from "react";
import { useQuery } from "react-query";
import FacilitiesService from "../services/facilities.service";
import { useParams } from "react-router-dom";
import Spinner from "../shared/Spinner";
import Stepper from "@mui/material/Stepper";
import Step from "@mui/material/Step";
import StepLabel from "@mui/material/StepLabel";
import { Form } from "react-bootstrap";
import DynamicInput from "../components/DynamicInput";
import { hasValidationError } from "../helpers/validation-checker";
import { isRelatedFieldOk, relatedFields } from "../helpers/related-field";
import Map from "../settings/Map";
import { Trans } from "react-i18next";
import { separator } from "../helpers/separator";
import StepOperations from "../components/StepOperations";

const parentFacilityField = {
  id: "parent-facility",
  type: "text",
  active: false,
  disabled: true,
  stateName: "parentName",
};

function Facility() {
  const [activeStep, setActiveStep] = useState(0);
  const [fieldsValue, setFieldValue] = useState({});
  const [fieldErrors, setFieldErrors] = useState({});
  const [levels, setLevels] = useState([]);

  const { id } = useParams();

  const { isLoading: isFacilityDefaultLoading } = useQuery(
    ["facility-default-value", id],
    async () => {
      const defaultData = {
        code: "Unique code generated by system",
        updated_at: new Date().toISOString().split("T")[0],
      };

      if (id === "new") {
        return defaultData;
      }

      const res = await FacilitiesService.getFacilities(id);
      return { ...res.data, defaultData };
    },
    {
      refetchOnMount: true,
      onSuccess(data) {
        setFieldValue(data);
      },
    }
  );

  const { data: facilityFields, isLoading: isFacilitiesFields } = useQuery(
    ["facility-fields"],
    async () => {
      const res = await FacilitiesService.getFacilityFields();
      const result = {};
      if (res.data) {
        for (const field of res.data.related) {
          if (field.stateName === "name") {
            continue;
          }
          const fieldTopicInResult = result[field.topic] ?? [];
          fieldTopicInResult.push(field);
          result[field.topic] = fieldTopicInResult;
        }
        const firstTopic = Object.keys(result)[0];
        //static fields
        setLevels(
          res.data.levels.map((level) => ({
            id: level.id,
            name: `${level.id} - ${level.name}`,
            order: 1,
            enabled: true,
            paramid: level.id,
            minpop: level.minpop,
            maxpop: level.maxpop,
          }))
        );

        result[firstTopic].unshift({
          id: "code",
          name: "Facility code:",
          topic: firstTopic,
          type: "text",
          active: false,
          disabled: true,
          required: false,
          stateName: "code",
          params: [],
        });

        setFieldValue((perFieldsValue) => ({
          ...perFieldsValue,
          completerstaffname:
            perFieldsValue?.completerstaffname ?? res.data.user.username,
          parentName: res.data.facility.name,
        }));
      }
      return result;
    },
    {
      refetchOnMount: true,
    }
  );

  if (isFacilityDefaultLoading || isFacilitiesFields) {
    return <Spinner />;
  }

  const facilityNameField = {
    id: "name",
    type: "text",
    active: activeStep === 0,
    required: true,
    disabled: activeStep !== 0,
    stateName: "name",
  };

  const levelField = {
    id: "level",
    type: "select",
    active: activeStep === 0,
    required: true,
    disabled: activeStep !== 0,
    stateName: "level",
    params: levels,
  };

  const hasRequiredErrors = () => {
    const _fieldErrors = { ...fieldErrors };
    const currentStepFields = [...Object.values(facilityFields)[activeStep]];
    if (activeStep === 0) {
      currentStepFields.push(levelField);
      currentStepFields.push(facilityNameField);
    }
    currentStepFields.forEach((field) => {
      if (field.required && !fieldsValue[field.stateName]) {
        _fieldErrors[field.stateName] = "this field is required!";
      }
    });
    setFieldErrors(_fieldErrors);
    return Object.keys(_fieldErrors).length > 0;
  };

  const handleNext = () => {
    if (!hasRequiredErrors()) {
      setActiveStep((prevActiveStep) => prevActiveStep + 1);
    }
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const onChangeHandler = (value, field) => {
    const validation = field.validation?.[0];
    if (
      field.stateName === "populationnumber" ||
      field.stateName === "childrennumber"
    ) {
      console.log(+selectedLevel);
      validation.min = +selectedLevel?.minpop;
      validation.max = +selectedLevel?.maxpop;
    }
    const validationErr = hasValidationError(value, validation);
    const cloneFieldsValue = { ...fieldsValue };
    cloneFieldsValue[field.stateName] = value;
    if (field.stateName === "level") {
      cloneFieldsValue[field.stateName] = parseInt(value);
    }
    setFieldValue(cloneFieldsValue);
    //check validation and required
    const _fieldErrors = { ...fieldErrors };
    if (validationErr) {
      _fieldErrors[field.stateName] = validationErr;
    } else {
      delete _fieldErrors[field.stateName];
    }
    setFieldErrors(_fieldErrors);
  };

  const onSaveHandler = async (e) => {
    e.preventDefault();
    if (hasRequiredErrors()) {
      return;
    }
    const _fieldsValue = { ...fieldsValue };
    for (const key in relatedFields) {
      const fields = relatedFields[key];
      if (fieldsValue[key] === false) {
        fields.forEach((field) => {
          delete _fieldsValue[field];
        });
      }
    }
    const res = await (id === "new"
      ? FacilitiesService.postFacility(_fieldsValue)
      : FacilitiesService.putFacility(_fieldsValue));
  };

  const handleMapClick = (e) => {
    const cloneFieldsValue = { ...fieldsValue };
    cloneFieldsValue["gpsCordinate"] = e.latlng;
    setFieldValue(cloneFieldsValue);
  };

  const selectedLevel = levels[fieldsValue["level"] - 2];
  return (
    <form onSubmit={onSaveHandler}>
      <h3 className="page-title mb-3">
        <Trans>Facility information</Trans>
      </h3>
      <div className="mt-3">
        <div className="card">
          <div className="card-body pb-3">
            <div className="row pb-4" style={{ overflow: "auto" }}>
              <Stepper activeStep={activeStep}>
                {Object.keys(facilityFields).map((topic, index) => {
                  return (
                    <Step key={topic}>
                      <StepLabel style={{ width: "max-content" }}>
                        {topic}
                      </StepLabel>
                    </Step>
                  );
                })}
              </Stepper>
            </div>
            <StepOperations
              handleBack={handleBack}
              handleNext={handleNext}
              activeStep={activeStep}
              stepsLength={Object.keys(facilityFields).length - 1}
              isNextDisabled={Object.keys(fieldErrors).length > 0}
            />
          </div>
        </div>
      </div>
      <div className="mt-3">
        <div className="card">
          <div className="card-body pb-3">
            <div className="row">
              <Form.Group className="row mb-0">
                <label
                  className={`col-sm-4 text-right control-label`}
                  style={{
                    display: "flex",
                    justifyContent: "flex-end",
                    alignItems: "center",
                    lineHeight: "1.4",
                    textAlign: "right",
                  }}
                >
                  Facility name:
                </label>
                <div className={"col-sm-8"}>
                  <DynamicInput
                    field={facilityNameField}
                    defaultValue={fieldsValue["name"]}
                    onChangeHandler={onChangeHandler}
                  />
                </div>
                {fieldErrors["name"] && (
                  <div className="row">
                    <div className="col-sm-4"></div>
                    <div className="col-sm-8">
                      <p className="my-1 ml-2 text-danger">
                        {fieldErrors["name"]}
                      </p>
                    </div>
                  </div>
                )}
              </Form.Group>
            </div>
            <div className="row mt-3">
              <Form.Group className="row mb-0">
                <label
                  className={`col-sm-4 text-right`}
                  style={{
                    display: "flex",
                    justifyContent: "flex-end",
                    alignItems: "center",
                    lineHeight: "1.4",
                    textAlign: "right",
                  }}
                >
                  Parent facility:
                </label>
                <div className={"col-sm-8"}>
                  <DynamicInput
                    field={parentFacilityField}
                    defaultValue={fieldsValue["parentName"]}
                  />
                </div>
              </Form.Group>
            </div>
            <div className="row mt-3">
              <Form.Group className="row mb-0">
                <label
                  className={`col-sm-4 text-right control-label`}
                  style={{
                    display: "flex",
                    justifyContent: "flex-end",
                    alignItems: "center",
                    lineHeight: "1.4",
                    textAlign: "right",
                  }}
                >
                  Level:
                </label>
                <div className={"col-sm-8"}>
                  <DynamicInput
                    field={levelField}
                    defaultValue={fieldsValue["level"]}
                    onChangeHandler={onChangeHandler}
                  />
                </div>
                {fieldErrors["level"] && (
                  <div className="row">
                    <div className="col-sm-4"></div>
                    <div className="col-sm-8">
                      <p className="my-1 ml-2 text-danger">
                        {fieldErrors["level"]}
                      </p>
                    </div>
                  </div>
                )}
              </Form.Group>
            </div>
          </div>
        </div>
      </div>
      <div className="mt-3">
        <div className="card">
          <div className="card-body">
            {Object.values(facilityFields)[activeStep]?.map((field) => {
              if (!isRelatedFieldOk(field.stateName, fieldsValue)) {
                return null;
              }
              const hasRequiredError = !!fieldErrors[field.stateName];
              return (
                <Form.Group className="row mb-0" key={field.name}>
                  <label
                    className={`col-sm-4  ${
                      field.required ? "control-label" : ""
                    }`}
                    style={{
                      display: "flex",
                      justifyContent: "flex-end",
                      alignItems: "center",
                      lineHeight: "1.4",
                      textAlign: "right",
                    }}
                  >
                    {field.name}
                  </label>
                  <div className="col-sm-8">
                    {field.stateName === "gpsCordinate" ? (
                      <div className="map  ">
                        <div className="mb-2">
                          <Form.Control
                            type="text"
                            disabled
                            value={fieldsValue[field.stateName]}
                          />
                        </div>
                        <Map
                          loca={fieldsValue[field.stateName]}
                          handleChange={handleMapClick}
                        />
                      </div>
                    ) : (
                      <DynamicInput
                        field={field}
                        onChangeHandler={onChangeHandler}
                        defaultValue={fieldsValue[field.stateName]}
                        separator={
                          field.stateName === "childrennumber" ||
                          field.stateName === "loverlevelfac" ||
                          field.stateName === "populationnumber"
                        }
                      />
                    )}
                    <br />

                    {(field.stateName === "populationnumber" ||
                      field.stateName === "childrennumber") &&
                      levels[fieldsValue["level"] - 2] && (
                        <p>
                          range: {separator(selectedLevel?.minpop)} -{" "}
                          {separator(selectedLevel?.maxpop)}
                        </p>
                      )}
                  </div>
                  {hasRequiredError && (
                    <div className="row">
                      <div className="col-sm-4"></div>
                      <div className="col-sm-8">
                        <p className="my-1 ml-2 text-danger">
                          {fieldErrors[field.stateName]}
                        </p>
                      </div>
                    </div>
                  )}
                  <hr className="my-3" />
                </Form.Group>
              );
            })}
          </div>
        </div>
      </div>
      <div className="mt-3 mb-3">
        <div className="card">
          <div className="card-body py-2">
            <StepOperations
              handleBack={handleBack}
              handleNext={handleNext}
              activeStep={activeStep}
              stepsLength={Object.keys(facilityFields).length - 1}
              isNextDisabled={Object.keys(fieldErrors).length > 0}
            />
          </div>
        </div>
      </div>
    </form>
  );
}

export default Facility;
